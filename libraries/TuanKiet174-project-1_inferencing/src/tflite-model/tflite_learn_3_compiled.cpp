/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 03.03.2025 15:54:17

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 15568, -24643, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00032381713390350342, 0.00019439715833868831, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 11,-28,-42,97,39,-2,-46,28,67,-34,-6,-31,-29,33,-41,23,45,-28,-17,-23,87,70,15,-57,-47,-62,29,127,6,-11,69,46, 
  /* [1][0][][] */ 52,66,67,-63,-92,67,-3,11,-36,-14,31,96,101,38,43,-7,-35,0,-78,-79,-78,30,37,95,74,66,-64,-41,88,-92,-127,-23, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0068590203300118446, 0.0041176760569214821, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 166, -9, 49, 1011, 1051, 56, -513, 532, 200, -820, -183, -50, 79, 239, -26, 57, 48, -1000, 824, -383, 264, 655, 141, 43, 80, -20, 839, 2360, -5, -97, 1617, 197, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.1764349336735904e-05, 5.6305088946828619e-05, 5.2381878049345687e-05, 6.2093400629237294e-05, 4.8105655878316611e-05, 5.4296331654768437e-05, 4.3873682443518192e-05, 4.1710954974405468e-05, 4.6392080548685044e-05, 4.6194109017960727e-05, 4.5429169404087588e-05, 4.5737655455013737e-05, 5.0104910769732669e-05, 5.0011498387902975e-05, 5.7960281992563978e-05, 8.0640886153560132e-05, 5.8918623835779727e-05, 4.9002675950760022e-05, 6.2263963627628982e-05, 4.5048484025755897e-05, 5.9696183598134667e-05, 4.4397071178536862e-05, 4.5715994929196313e-05, 5.5304877605522051e-05, 5.3557032515527681e-05, 4.3989570258418098e-05, 6.640132050961256e-05, 8.719223114894703e-05, 6.9681496825069189e-05, 5.1783892558887601e-05, 7.5217882113065571e-05, 6.6490152676124126e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -27,-46,96,15,82,-7,-70,-79,21,-82,-85,8,53,10,-26,47,-49,-39,-49,-38,-67,-85,2,97,-127,7,71,-35,95,8,-14,-68,72,-48,-73,55,-76,-67,-65,22,48,-101,-84,97,41,-86,92,-17,-5,-50,-24,69,-54,-41,-78,96,14,62,85,-91,-53,78,-53,44,-3,17,61,80,50,88,71,-92,88,-93,41,74,-83,25,-58,29,51,24,79,-52,-48,-60,-77,90,21,69,-2,-86,12,55,25,9, 
  /* [1][0][][] */ -39,18,-44,5,-25,65,28,16,40,-79,-73,98,58,-19,26,50,81,-49,24,94,-43,-4,22,30,-21,11,-20,84,11,15,83,-48,49,84,-3,25,50,40,3,-44,-60,-34,-19,-63,-31,23,-13,-48,-44,-78,94,25,16,72,-67,-30,13,84,32,72,-40,101,-76,-59,-36,35,60,33,88,33,14,13,-80,55,-32,34,63,-22,-39,57,-56,69,-39,-127,21,41,-60,-50,56,35,77,30,66,73,25,-21, 
  /* [2][0][][] */ 45,24,-38,86,-11,-42,71,87,-96,70,-21,114,84,-8,77,-91,-48,-42,26,50,-82,-10,86,28,-71,63,99,10,-52,78,73,82,-51,-10,-71,-82,-59,72,101,-17,-109,-104,10,8,-72,93,-7,-69,53,19,81,-90,-29,61,11,24,-60,86,-67,14,-7,63,-51,59,85,48,42,74,-68,68,11,-54,36,-76,32,22,-42,-5,-2,11,38,-70,-7,-71,1,-127,-23,-23,69,64,-12,18,-33,-60,-32,-69, 
  /* [3][0][][] */ 54,14,26,-8,-39,38,-62,7,53,15,51,-28,66,83,52,21,96,101,-53,60,95,-69,-17,-64,28,-61,-64,84,44,-88,50,20,-17,-15,0,-8,-52,5,13,37,-26,-15,-53,-2,71,44,-46,-18,103,-25,32,26,63,28,72,-63,-63,-79,-76,-35,-49,12,6,56,43,-31,-31,1,-23,-81,18,72,12,-34,52,-13,50,127,79,-31,-46,-58,21,79,48,101,-22,-57,-38,67,-4,-87,54,-83,-66,101, 
  /* [4][0][][] */ 35,120,-16,42,-23,-14,73,10,87,89,-5,20,20,-34,-10,-45,-13,24,-49,58,124,-92,115,9,24,13,48,-36,-41,37,-87,-25,76,106,20,-101,-11,26,-103,71,-28,-19,-81,-67,77,90,-22,77,91,-25,-23,-37,-80,83,-36,19,39,-76,40,5,53,-59,26,-39,-52,46,17,-21,23,-127,-80,-58,-56,70,107,89,78,13,29,-32,5,-46,-87,34,8,115,101,23,-95,10,31,21,14,80,-98,52, 
  /* [5][0][][] */ 80,-78,71,72,36,-86,21,54,64,-94,7,-38,26,78,35,29,45,30,-61,81,19,40,7,-14,-127,-53,-3,-71,41,35,19,-75,-28,5,-52,17,-80,-34,51,21,-81,-79,29,89,-31,16,34,-47,-112,71,27,6,39,22,21,-11,77,46,-56,-23,31,-42,6,-55,-17,86,-19,24,66,10,81,-50,-33,46,-16,-57,8,-26,2,67,90,37,22,49,-66,17,-11,31,50,-106,98,80,-13,22,63,-80, 
  /* [6][0][][] */ 22,-49,103,72,-81,-63,-2,59,-21,-62,2,-70,86,50,105,-124,32,15,-6,99,-89,-122,127,60,-80,-84,-4,-70,-34,-127,57,-80,-84,-115,-43,-117,-11,31,-110,86,79,55,19,-20,-110,92,-65,-56,3,0,-29,-65,60,-33,84,-17,2,-6,-65,105,-103,5,55,-66,-45,69,82,-65,66,-2,-99,-5,58,-74,-96,-55,-92,-103,-54,-40,27,-29,40,-36,-76,-115,-41,-96,75,92,78,19,-69,-77,82,-36, 
  /* [7][0][][] */ 111,77,-28,-37,-72,121,-17,15,113,-7,-80,12,58,-90,51,84,38,-1,6,123,61,34,-15,82,-74,106,42,62,-76,127,-18,39,24,22,67,114,-85,99,19,-48,96,-94,84,89,48,13,79,-111,24,-57,-86,-65,-17,95,25,27,127,-92,6,-51,25,-3,82,-109,-65,-64,80,26,-104,13,67,101,84,20,74,82,-57,65,-105,52,107,-30,-19,-80,88,16,-110,103,94,-15,92,68,-58,-47,22,-65, 
  /* [8][0][][] */ 17,53,-52,-94,37,31,-68,-25,46,38,38,63,-8,-31,-87,-64,-62,109,-36,7,46,-22,89,81,-57,94,24,67,-73,10,-94,119,77,-29,38,-17,101,21,-18,48,104,127,-120,-118,-2,-6,-52,120,56,-59,-81,18,-73,-14,-12,-111,60,86,-75,89,106,25,111,93,-49,-50,-24,95,-84,21,37,-3,60,84,7,30,-36,89,97,68,23,69,-103,-45,34,107,85,-35,39,-6,-78,78,-80,-98,-54,79, 
  /* [9][0][][] */ 6,10,97,33,78,-95,-52,-116,51,57,-28,59,-27,-82,-101,-36,8,7,-89,-81,-8,90,-94,-93,93,-13,-1,28,-14,-49,-66,74,52,-1,23,-27,-89,-1,-46,-14,61,-58,51,-105,62,-6,-65,34,105,-42,-97,-48,69,-61,-85,95,76,-54,-7,-23,-106,103,95,-71,-74,28,85,34,-39,101,94,-95,14,70,-113,-113,-95,-127,-34,90,16,2,95,42,-51,-104,31,-29,85,54,-31,102,100,10,54,-50, 
  /* [10][0][][] */ -56,67,95,-61,-14,100,99,41,-13,20,32,-41,102,71,-25,11,-35,56,-97,-63,-34,25,43,-63,-83,44,-96,-111,-44,92,-80,-79,75,96,115,63,-35,-5,-14,50,-50,54,-127,-21,-110,-63,5,-74,-32,-17,41,-24,67,29,-75,-26,-120,-2,4,-41,2,89,77,42,118,-67,-90,-23,31,-15,-101,-58,87,39,-70,96,-33,60,52,13,74,-3,51,55,-99,7,84,-28,26,-32,-3,-56,-57,-55,-38,-100, 
  /* [11][0][][] */ 109,0,-7,100,103,44,56,37,81,89,-73,114,-4,-83,25,-58,-45,-106,71,35,10,68,12,-114,-120,-89,-15,71,76,18,32,-13,-96,-64,52,31,-46,68,-5,-45,-28,47,-109,32,-36,-34,-90,-92,75,88,96,7,-79,-97,30,32,-78,-43,-88,-104,-57,96,71,19,23,85,-53,32,90,54,-96,-62,46,80,-78,59,-72,43,-44,81,-102,-25,-54,-69,53,-127,3,-12,-97,-40,22,-92,-84,-25,-75,-66, 
  /* [12][0][][] */ 16,51,-35,10,81,10,-30,42,-88,49,-2,31,-28,13,51,-66,-87,-47,-44,-62,18,-8,9,94,-100,-44,99,-81,85,26,-23,103,-70,-54,-34,19,12,-69,3,42,85,-7,-95,-19,-21,-73,-23,96,-67,-111,-56,71,42,10,-77,82,-25,-41,29,68,59,112,-29,50,106,38,-36,103,59,99,38,69,79,83,-6,-4,-28,46,-106,-76,-41,94,44,-29,-31,-21,39,103,-83,-127,87,49,89,-9,32,50, 
  /* [13][0][][] */ 96,-52,99,89,84,102,70,69,46,-93,26,-12,85,65,65,-35,-111,-76,-58,27,57,-23,95,-39,-110,34,14,16,-72,-59,77,39,37,92,-15,38,-59,-23,46,60,-60,28,-54,26,-41,30,-5,-28,3,81,-15,-102,-76,38,86,-66,-43,31,-29,-50,-10,111,-74,17,-37,-51,-73,77,-22,-11,84,8,-76,24,-54,-29,-89,64,64,-52,52,-78,86,-9,-70,-127,77,105,-7,-71,-59,54,98,-46,72,-13, 
  /* [14][0][][] */ -46,-70,72,59,66,-6,-4,-76,-73,-45,69,90,-14,-72,-67,-60,-29,-44,-14,29,-52,1,8,60,-127,-64,-15,15,-88,-93,-52,45,84,-12,-27,-5,75,80,34,-65,-16,-122,27,83,58,-78,47,-68,70,17,62,23,82,32,-21,20,-60,17,32,95,-5,-44,-67,60,-64,-9,53,-78,-69,-56,-67,77,8,48,45,-53,51,-65,21,23,39,-5,-90,-74,-82,-94,-83,85,72,-27,64,-28,53,72,-9,41, 
  /* [15][0][][] */ -4,-10,-19,31,47,-42,37,-52,55,-9,-35,-1,48,1,-56,-60,28,22,-42,11,30,7,44,48,127,36,11,49,10,30,37,-55,0,-4,-37,-7,-32,69,66,-41,30,84,-36,-14,13,-35,-37,-32,26,-33,6,40,-52,-34,-22,-11,39,18,-7,53,-20,-43,43,61,-17,40,-41,-7,-39,-20,25,-38,1,5,30,-51,-5,25,60,45,-45,27,-53,7,-67,42,-45,22,58,60,-65,-30,17,54,-42,70, 
  /* [16][0][][] */ -60,10,65,-52,24,76,-38,22,59,32,-83,33,-20,-38,-47,-42,77,79,56,43,87,56,-23,26,33,42,-63,44,-78,0,21,7,-81,49,36,39,-33,49,-45,-57,33,7,53,56,49,82,55,0,-12,-69,1,103,-38,80,58,22,29,56,66,2,83,65,56,43,31,-2,-27,66,23,56,-24,-11,13,85,42,70,-7,58,-72,-10,5,-67,41,50,9,127,83,7,63,37,-16,69,47,-28,-62,40, 
  /* [17][0][][] */ 10,-120,22,61,-51,-114,-80,-90,13,-95,52,44,74,30,-112,27,16,18,70,85,-104,-30,-16,-47,1,39,-75,10,80,-58,-44,41,-44,-43,11,-6,-52,69,-91,-33,-107,-57,-17,-24,-14,-13,68,-111,44,67,-30,6,-28,45,68,-82,-127,65,-94,-113,8,-87,41,69,-89,-84,28,-105,-109,-5,70,7,3,-122,-73,39,81,-47,13,-65,-1,-35,-78,-102,-123,38,44,-46,-1,51,-101,-107,-19,80,-15,-8, 
  /* [18][0][][] */ -73,107,73,-42,-10,-58,-75,1,-11,52,-70,-53,-28,35,47,-19,24,-2,103,8,92,-33,29,-68,67,-46,-17,85,24,19,-22,44,34,-19,-76,-50,-11,82,-28,39,-46,12,6,-1,-70,23,-16,29,15,-4,64,34,-88,13,31,49,25,20,7,-71,81,67,63,8,-42,-89,-5,77,56,-63,-53,75,-79,118,-48,-60,61,127,25,-33,-26,15,58,-56,89,28,51,71,-59,25,-48,55,61,-36,38,90, 
  /* [19][0][][] */ 15,29,66,30,48,-75,78,81,116,-62,22,-13,-94,35,-55,52,67,-109,87,45,-17,85,-58,6,94,-81,26,-69,-90,-111,-67,36,75,-83,27,1,5,-68,-54,-98,38,-114,-86,3,-86,30,71,-87,-18,25,-50,37,-40,17,2,-12,24,87,-7,-29,48,-56,127,50,-70,-6,-31,-8,-7,44,76,-54,-63,-114,-60,-85,-23,-113,16,100,49,-108,-34,63,-84,-6,4,-9,79,27,-6,54,-36,124,68,-47, 
  /* [20][0][][] */ -11,65,46,67,-65,76,23,30,29,12,-67,-17,-10,72,21,-47,-47,-21,-41,-17,26,-34,-39,-60,97,-41,-91,39,16,1,-35,84,75,35,-10,39,24,-11,-22,-95,-56,27,-68,-76,-5,-47,-56,87,62,-75,-76,45,29,76,44,-3,76,42,84,55,78,-48,-6,-18,-23,-52,-39,15,-63,-65,-42,55,-47,-42,23,22,82,48,88,79,62,11,67,10,52,127,-3,57,26,102,26,39,11,14,-10,27, 
  /* [21][0][][] */ 72,76,85,-87,115,-103,81,40,-22,-76,-42,63,18,31,-32,-80,-101,-18,-1,2,94,-43,56,-63,48,-89,-12,69,31,25,-6,-31,28,15,-81,-94,127,95,-89,-25,-2,-36,25,8,-112,-71,-94,91,-34,-78,16,77,54,97,-103,36,-79,67,-61,127,75,-47,-7,-4,91,26,-10,-64,-94,-6,59,87,35,-33,87,84,-97,-15,46,115,29,92,22,-92,20,-114,58,-76,-100,52,109,-100,-47,-87,89,-30, 
  /* [22][0][][] */ 10,-61,-64,-75,92,-58,126,61,-103,90,-80,-106,107,-123,-117,-59,49,94,-127,-29,72,-88,19,44,105,8,-106,98,-47,-77,-80,-121,46,49,17,15,26,-16,-60,-122,17,-21,25,102,48,-106,83,-15,-79,-105,19,-14,-49,-108,-35,29,-3,-22,-19,-47,118,-68,-119,-94,-68,11,-84,-30,95,124,-28,4,-50,4,75,-52,40,-21,41,104,111,-113,-41,-93,77,51,86,-6,-41,11,-45,60,27,16,-41,118, 
  /* [23][0][][] */ 55,-80,15,53,83,-82,8,-68,16,-61,76,78,23,-82,23,-32,69,-40,-82,83,63,-64,74,-17,-59,-12,76,20,59,49,65,-23,-26,39,19,31,87,-13,-73,12,-87,-48,4,-70,-59,-75,98,13,32,-94,-60,-61,72,-35,-51,77,-72,-6,58,45,-81,-55,-74,-4,35,39,-88,-82,58,1,86,-49,2,-45,-25,-76,34,-4,61,91,-36,-31,17,-127,70,-40,77,-14,-77,-5,88,7,86,-37,-17,49, 
  /* [24][0][][] */ -59,-39,-71,-45,-62,-63,-40,-57,29,98,80,57,102,46,-22,-93,-78,20,29,-40,75,-70,-52,-26,-3,-22,71,58,86,63,14,-35,-1,17,39,31,-20,-83,75,-10,-64,-115,76,27,15,-46,33,48,-84,-54,8,12,67,70,53,-56,-10,76,-4,13,87,21,20,85,-69,94,-34,-66,-67,56,-50,-5,-22,3,86,87,55,-39,-91,-65,-57,-73,-43,-127,-3,1,-24,-73,13,-121,14,-49,-10,34,-59,4, 
  /* [25][0][][] */ -75,-71,-62,4,103,-65,-95,66,3,-106,-28,54,86,1,-96,-27,-70,51,34,-94,48,81,-16,-39,-39,-52,-78,40,82,-72,52,116,97,-99,50,77,121,-66,-2,-5,-95,46,-107,22,90,32,86,27,-115,74,-56,-18,59,-6,-73,25,-33,66,-127,83,121,63,14,52,17,87,-17,-5,-77,19,-22,-102,47,-124,77,15,69,98,-11,22,58,59,-41,19,-76,-100,-113,-89,-35,-100,112,41,-110,-5,-8,-101, 
  /* [26][0][][] */ 35,-60,-11,-1,-59,1,19,-14,-54,-80,75,29,-54,-20,5,3,76,34,-32,-31,29,51,84,1,61,66,-4,47,21,0,-53,4,-22,-33,-56,-63,-36,82,-33,63,-51,127,46,18,-37,63,-42,86,11,55,8,78,14,-41,21,-72,81,41,53,15,9,-74,92,8,77,-12,-25,51,-48,43,62,74,51,-34,-47,34,36,-76,-38,12,-7,57,76,-8,67,47,-11,16,-19,114,13,7,-32,73,36,82, 
  /* [27][0][][] */ 3,24,-29,-41,-46,-33,12,-14,64,50,48,-86,-18,46,37,28,35,36,60,0,-7,0,57,-34,30,55,-75,-1,39,-4,-8,16,46,47,-34,-39,-29,52,-48,27,-9,127,26,28,103,50,-14,87,79,89,51,-9,-29,-35,56,-17,76,-19,33,-29,32,-44,32,66,26,-43,-29,74,19,-31,-36,38,19,65,38,27,56,-17,80,71,71,13,69,75,-4,43,44,67,38,88,-16,-41,19,2,80,115, 
  /* [28][0][][] */ 57,1,54,27,-67,-41,-56,-102,-73,-69,34,26,-51,-53,-3,61,49,52,-56,6,-34,6,-93,-48,-92,51,-78,-29,-47,-54,1,-12,-77,13,47,49,-7,-73,-43,-3,67,34,-62,33,-103,-59,9,19,-12,-33,-75,-41,-60,-8,18,17,34,-11,23,33,-31,-35,-74,3,35,49,-22,52,-48,13,-86,-30,41,10,-7,-73,-100,-48,-127,23,-46,-55,30,-46,36,-117,30,-81,-58,-77,-21,-37,-17,22,-73,-81, 
  /* [29][0][][] */ 45,52,39,-50,-81,-2,-101,5,106,-6,-70,-86,83,-81,-42,-40,-83,98,25,-58,-49,-30,51,-6,5,10,-46,-32,-91,-13,78,5,40,1,-69,-54,-16,90,-10,74,42,92,-46,61,2,97,-56,-17,39,16,33,-68,51,-75,96,33,-67,39,-37,95,-97,70,-58,-49,-61,-63,42,72,73,-85,34,-59,86,72,48,21,95,-53,-18,25,-10,-73,-3,-60,54,127,46,70,-29,91,55,58,-90,18,-15,61, 
  /* [30][0][][] */ 16,10,-42,22,-40,14,17,2,102,16,16,-47,-66,24,38,32,-14,73,84,-26,59,-48,-22,-24,-10,56,-35,77,2,-47,-39,9,-43,-30,-55,-15,56,48,17,48,109,51,-4,70,86,-4,44,75,15,75,56,-22,62,-14,26,51,11,-27,27,-45,-36,-17,41,25,-37,-59,-25,61,-30,43,42,20,-53,127,59,-15,-32,-22,19,-14,31,21,9,70,-47,100,-41,109,77,57,55,9,-23,24,40,18, 
  /* [31][0][][] */ 46,-45,20,59,28,35,-34,-68,-29,-23,-45,-73,57,-81,-34,79,-38,-65,55,34,49,16,-5,58,67,-73,9,33,-47,-52,26,74,5,12,-60,-13,58,5,-43,-75,30,-14,-25,23,4,-38,-47,24,84,33,64,0,-77,-22,-47,9,-80,41,2,78,-13,-11,79,-48,44,69,-29,-49,49,-101,-94,13,-73,15,4,14,-35,-35,49,54,-49,-25,56,87,38,127,-66,15,28,-7,-73,-43,-7,41,-6,14, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021999848540872335, 0.0023929663002490997, 0.0022262297570705414, 0.002638969337567687, 0.0020444903057068586, 0.0023075940553098917, 0.00186463154386729, 0.0017727154772728682, 0.0019716634415090084, 0.0019632496405392885, 0.0019307397305965424, 0.0019438503077253699, 0.0021294585894793272, 0.0021254885941743851, 0.0024633118882775307, 0.0034272377379238605, 0.0025040414184331894, 0.0020826137624680996, 0.0026462185196578503, 0.0019145605619996786, 0.0025370877701789141, 0.0018868754850700498, 0.0019429298117756844, 0.0023504572454839945, 0.0022761737927794456, 0.0018695567268878222, 0.0028220561798661947, 0.0037056696601212025, 0.0029614635277539492, 0.0022008153609931469, 0.0031967598479241133, 0.0028258312959223986, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1798, 60, 3725, 4253, 4112, -1499, 3128, -1108, -2405, -686, 5000, -1957, 4105, 5541, 2303, 1715, -486, -106, -1077, 3807, 2292, -981, 2403, -808, -503, 3369, 1221, 2113, 6006, 1721, 3909, 910, 1154, 4215, 4507, 3163, -407, 3039, 2028, -3765, -228, 1762, -66, 1630, -842, 410, -1362, 1048, -6706, 1848, 1186, -3761, 5485, -908, 1804, 1337, 1264, 2396, -606, -1880, 178, 1451, 1242, 3709, 5229, 2652, 2305, 4477, 3579, -588, 3456, 5732, 3661, -977, 4356, 7696, 625, -4021, 951, 806, 7773, 1424, -241, -1482, 981, 1156, 1440, -1693, 2983, -27, 3166, 1281, 25, -2639, -5, 2084, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00011783273657783866, 0.00029112567426636815, 0.00014773396833334118, 0.00017710443353280425, 0.0001529031724203378, 0.00028364078025333583, 0.00018335823551751673, 0.00024834502255544066, 0.00015934876864776015, 0.00021857612591702491, 0.00013209694589022547, 0.00022076265304349363, 0.000133550725877285, 0.00011605075269471854, 0.00014374386228155345, 0.00021446624305099249, 0.00030807207804173231, 0.00020069512538611889, 0.00023077886726241559, 0.00015458889538422227, 0.00021340145030990243, 0.00018526463827583939, 0.00015457272820640355, 0.0001584675774211064, 0.00026852113660424948, 0.00019204038835596293, 0.00024321214004885405, 0.00017953013593796641, 0.00011932245979551226, 0.00023131803027354181, 0.00013416218280326575, 0.00026568255270831287, 0.00024995999410748482, 0.00014642919995822012, 0.00012226708349771798, 0.00014907798322383314, 0.00018953140533994883, 0.00016930335550568998, 0.00016473968571517617, 0.00013154055341146886, 0.00019579939544200897, 0.00016781089652795345, 0.00025028499658219516, 0.00017288376693613827, 0.00021433994697872549, 0.00016534391033928841, 0.00017274182755500078, 0.00019470030383672565, 0.00010645698057487607, 0.00015392752538900822, 0.00020805251551792026, 0.00012820046686101705, 0.00013484395458362997, 0.00020573899382725358, 0.00019505831005517393, 0.00017560595006216317, 0.00018485495820641518, 0.00015818970859982073, 0.000237994798226282, 0.00016028835671022534, 0.00023455670452676713, 0.00018130596436094493, 0.00020246034546289593, 0.0001801900943974033, 0.0001313084940193221, 0.00017819668573793024, 0.00014545938756782562, 0.00017039338126778603, 0.00017863516404759139, 0.00021223974181339145, 0.0001400445617036894, 0.00012325267016422004, 0.00012514412810560316, 0.00021925968758296221, 0.00016770178626757115, 0.00010896484309341758, 0.00016960418724920601, 0.00015610794071108103, 0.00017052737530320883, 0.00022536006872542202, 0.00011184944014530629, 0.00019167532445862889, 0.00020571472123265266, 0.00021070554794277996, 0.00019963513477705419, 0.00023423653328791261, 0.00018296785128768533, 0.00019250580226071179, 0.00020299537573009729, 0.00025281979469582438, 0.00018727591668721288, 0.00016003810742404312, 0.00016389215306844562, 0.00017323720385320485, 0.0002389409055467695, 0.00018780273967422545, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -10,127,-95,33,53,-46,101,94,-95,4,45,-108,100,122,-76,28, 
  /* [1][0][][] */ -29,-4,-68,-15,15,62,50,-127,33,-45,-13,-48,-3,-55,-37,-9, 
  /* [2][0][][] */ -19,-27,31,88,34,56,-109,127,-22,6,73,-54,-19,-79,-45,64, 
  /* [3][0][][] */ 83,-91,74,-10,-12,-34,-28,127,-34,50,71,39,6,38,-3,24, 
  /* [4][0][][] */ -41,-26,1,45,-72,17,-34,-96,-19,-4,45,-6,38,47,75,127, 
  /* [5][0][][] */ 127,24,-24,-14,-60,16,32,55,36,-5,38,79,119,13,-74,-20, 
  /* [6][0][][] */ 11,-42,-38,-49,-88,-6,-26,-49,-55,-57,-28,36,88,45,127,2, 
  /* [7][0][][] */ -39,47,-28,-77,-9,-47,-71,7,-84,54,-82,-55,-127,-43,9,68, 
  /* [8][0][][] */ 52,47,109,2,91,42,79,12,80,-25,48,22,-127,-40,-95,10, 
  /* [9][0][][] */ -38,78,40,-61,-29,-22,25,-25,-24,47,-56,16,56,127,43,23, 
  /* [10][0][][] */ 72,36,-66,72,-62,-25,44,-39,-86,-28,-28,-111,-123,-74,25,127, 
  /* [11][0][][] */ 55,4,74,6,-11,-41,4,114,-84,16,-23,-3,-15,-32,80,127, 
  /* [12][0][][] */ -43,-29,15,-3,14,-2,100,49,-65,18,19,-5,-9,59,-43,127, 
  /* [13][0][][] */ -15,23,7,84,68,74,104,112,-7,127,-94,-43,17,55,-92,-43, 
  /* [14][0][][] */ -127,118,4,-1,-21,0,55,19,-47,40,124,-10,-82,-1,-40,58, 
  /* [15][0][][] */ -4,-11,-127,-34,71,-53,-72,-45,-11,-16,-22,-63,-10,-77,-40,29, 
  /* [16][0][][] */ 114,-26,-10,-11,33,-32,43,-32,-26,-1,127,41,24,12,-37,19, 
  /* [17][0][][] */ 0,34,-22,-93,13,-76,127,-108,-6,-29,-28,30,35,82,36,40, 
  /* [18][0][][] */ 9,104,-18,-27,48,-76,-10,-63,-25,127,-26,13,-21,45,30,-27, 
  /* [19][0][][] */ -56,-127,119,-85,41,-96,6,-28,39,18,80,109,37,-27,59,-20, 
  /* [20][0][][] */ -24,97,65,-2,14,1,12,-31,63,2,102,3,-127,-45,-71,-23, 
  /* [21][0][][] */ -57,23,14,25,73,35,44,30,-127,58,-21,3,-14,28,-69,-16, 
  /* [22][0][][] */ 10,-100,60,31,22,-127,125,20,9,-52,-27,-91,46,-106,-56,-37, 
  /* [23][0][][] */ -60,-112,49,78,44,-6,10,-34,18,-32,83,19,4,74,68,127, 
  /* [24][0][][] */ -8,9,30,76,22,11,-46,-127,48,27,-39,-2,24,-7,4,-25, 
  /* [25][0][][] */ -7,53,28,-58,-31,-22,7,-51,-5,52,-73,-8,34,127,51,-19, 
  /* [26][0][][] */ -60,62,3,22,11,-63,-8,-18,7,19,24,56,12,4,-72,127, 
  /* [27][0][][] */ -9,-127,-67,-12,-69,109,-9,-74,42,-41,42,-32,46,-80,-103,-54, 
  /* [28][0][][] */ -39,-4,42,83,22,8,-48,-122,-127,48,115,-13,77,8,-52,-18, 
  /* [29][0][][] */ -127,120,-37,-42,-38,26,-126,-72,-45,-56,-5,-16,3,-61,-123,72, 
  /* [30][0][][] */ 49,85,-35,82,-108,-81,-66,6,-60,7,17,-127,109,47,-35,119, 
  /* [31][0][][] */ 127,25,-60,-21,-48,36,124,43,-32,-4,49,53,49,11,-22,-13, 
  /* [32][0][][] */ -22,-19,127,-9,-17,76,86,8,-1,-20,-20,24,5,58,74,33, 
  /* [33][0][][] */ 3,26,-55,-50,-18,29,127,12,10,-36,11,-48,53,95,-15,26, 
  /* [34][0][][] */ -73,-25,81,-1,24,-47,92,-26,-127,24,36,-56,64,85,-74,-26, 
  /* [35][0][][] */ -9,10,-46,17,-89,110,-39,-2,-35,127,13,77,-48,68,0,58, 
  /* [36][0][][] */ -12,-82,127,-60,-54,8,-27,-7,15,11,-47,87,3,-95,-45,51, 
  /* [37][0][][] */ 77,0,85,-45,116,-94,-45,4,-59,123,-96,-7,-127,-44,88,-41, 
  /* [38][0][][] */ 54,68,7,-82,-47,-57,-92,62,-83,64,-105,-86,-73,-104,-127,68, 
  /* [39][0][][] */ -79,41,-77,-20,-74,-88,101,12,-127,-41,15,93,15,-13,17,18, 
  /* [40][0][][] */ 127,15,4,-99,-38,27,15,-44,-35,-47,-46,-67,41,80,58,18, 
  /* [41][0][][] */ 85,-70,-44,-19,-21,5,-74,-31,75,10,-25,-71,127,-76,46,-59, 
  /* [42][0][][] */ -13,-89,-40,127,3,-96,-99,10,9,1,4,48,-101,69,-54,-2, 
  /* [43][0][][] */ -71,-31,-45,-113,-49,-3,-23,74,44,-127,-50,47,-22,-64,-11,81, 
  /* [44][0][][] */ -36,67,37,-42,-33,-24,80,103,127,-63,48,99,109,39,7,-33, 
  /* [45][0][][] */ 40,82,-66,71,127,-104,-28,-78,100,-86,56,-49,-28,-5,-54,44, 
  /* [46][0][][] */ -35,-47,15,-4,90,-32,18,32,-13,127,-9,-101,25,58,-50,87, 
  /* [47][0][][] */ 85,-40,-43,-11,65,-25,-41,-66,10,127,-42,31,-8,-114,-67,-2, 
  /* [48][0][][] */ 7,24,-52,-97,7,-67,127,-114,5,3,-22,48,61,70,27,38, 
  /* [49][0][][] */ -52,111,-91,36,51,-85,81,55,-30,9,44,-77,-24,56,127,-98, 
  /* [50][0][][] */ 12,50,-17,0,-127,-11,-65,-53,54,60,30,29,-43,-44,6,35, 
  /* [51][0][][] */ 127,-40,-45,-14,-54,81,-94,-38,51,-19,-50,53,-21,-74,4,39, 
  /* [52][0][][] */ -34,-63,61,74,-50,-91,-111,17,-62,-40,-15,-71,17,-52,-7,127, 
  /* [53][0][][] */ 30,92,49,-97,-23,101,72,-19,-4,-14,-15,-15,58,-127,20,56, 
  /* [54][0][][] */ 35,127,14,-17,7,-90,-89,40,19,-24,-58,121,79,87,36,48, 
  /* [55][0][][] */ -43,-19,66,26,39,-44,83,93,-89,0,31,25,127,32,-12,14, 
  /* [56][0][][] */ 127,13,40,25,-52,111,-62,-72,-15,44,-96,7,-21,80,12,23, 
  /* [57][0][][] */ -40,-34,-47,-34,-80,-76,57,-10,-127,-22,64,49,19,37,-27,71, 
  /* [58][0][][] */ 42,-63,61,30,2,-56,-30,8,24,-7,-127,-35,33,-27,-27,47, 
  /* [59][0][][] */ 73,26,-84,85,-8,37,87,-17,-69,-36,23,-127,-94,-63,28,117, 
  /* [60][0][][] */ 5,30,-19,15,-6,-14,-28,-6,-20,-69,53,127,-49,-116,-34,-15, 
  /* [61][0][][] */ -37,10,72,-70,-57,39,-4,110,-29,-69,60,48,76,-2,-5,127, 
  /* [62][0][][] */ 65,29,13,-127,-17,23,16,-34,-8,62,-55,69,39,-31,-85,-107, 
  /* [63][0][][] */ 0,-21,7,-14,-75,-70,-57,26,-75,-15,-30,-19,127,-5,51,-3, 
  /* [64][0][][] */ 22,-5,-2,63,-95,-33,-23,-73,42,121,50,-8,41,-45,-61,127, 
  /* [65][0][][] */ -37,-1,-5,-13,-87,75,4,-20,39,-104,114,-49,80,66,-127,83, 
  /* [66][0][][] */ -110,86,-77,-75,48,-27,-107,-80,-93,112,94,9,-127,-41,37,61, 
  /* [67][0][][] */ 8,-9,-127,-102,70,68,5,-18,-21,-4,34,-20,15,26,14,23, 
  /* [68][0][][] */ 51,16,-5,-40,-59,24,10,38,-72,61,127,-20,-10,-41,-110,21, 
  /* [69][0][][] */ 49,-96,38,-31,21,-71,-31,127,-7,67,86,55,-3,68,-44,11, 
  /* [70][0][][] */ 49,8,127,70,117,-11,117,33,34,62,-62,32,-96,85,-109,58, 
  /* [71][0][][] */ 15,35,86,-76,-127,-94,18,-2,-9,-17,12,-107,-87,-1,32,12, 
  /* [72][0][][] */ -53,-83,17,-106,74,-12,4,54,-80,17,-97,-25,55,113,-59,127, 
  /* [73][0][][] */ 16,20,71,-17,127,-97,-49,17,-49,89,-87,34,-108,-58,101,-2, 
  /* [74][0][][] */ -97,5,-122,-75,79,-48,-20,17,-61,-6,-127,-14,-38,-67,0,53, 
  /* [75][0][][] */ 82,-13,49,-44,15,13,-127,-16,-8,-108,68,-3,3,-17,-6,-11, 
  /* [76][0][][] */ 14,-43,-40,92,44,89,124,-65,92,-127,59,92,20,-69,-32,22, 
  /* [77][0][][] */ -20,-15,127,-48,31,-45,-36,-124,25,3,17,93,32,22,17,-23, 
  /* [78][0][][] */ -65,-6,16,-37,24,-62,76,-12,33,-34,29,-69,-127,-108,-109,-95, 
  /* [79][0][][] */ -73,-59,-5,10,127,22,-23,13,17,27,-19,48,-13,-80,-46,-14, 
  /* [80][0][][] */ 6,-76,40,127,-24,-21,-84,51,11,27,15,25,-64,-20,19,28, 
  /* [81][0][][] */ 108,56,-7,100,-7,18,2,127,17,21,118,46,125,24,66,-9, 
  /* [82][0][][] */ -53,6,18,-25,24,-127,-107,-80,15,85,-54,-39,-40,68,-49,-46, 
  /* [83][0][][] */ 90,-32,83,-2,-53,-5,-127,8,23,-77,25,-46,-11,-5,26,-9, 
  /* [84][0][][] */ 30,-59,-115,11,127,46,55,19,-101,8,-117,-41,31,-46,-50,-5, 
  /* [85][0][][] */ -16,94,13,-50,62,-4,62,-112,127,-35,65,-6,111,-78,1,-13, 
  /* [86][0][][] */ 127,-20,105,43,6,-52,69,30,-52,-69,-108,-42,19,24,-47,-3, 
  /* [87][0][][] */ -8,18,23,-89,78,-27,-61,21,40,-29,71,-36,-97,-127,-3,10, 
  /* [88][0][][] */ -54,-30,37,-3,9,21,-72,-54,5,17,-87,-127,-44,-44,-9,-29, 
  /* [89][0][][] */ -80,18,19,-57,14,8,-127,35,85,37,-75,-19,-6,-63,-22,-31, 
  /* [90][0][][] */ -14,-21,-23,-71,127,10,-65,45,37,52,31,-8,38,23,-57,-7, 
  /* [91][0][][] */ -38,-52,19,66,-58,7,18,72,-32,-53,13,-72,-9,82,20,127, 
  /* [92][0][][] */ -34,73,4,-4,-21,67,-109,66,-48,-3,86,10,-36,127,50,34, 
  /* [93][0][][] */ 5,82,-32,-86,71,78,-83,2,61,53,43,72,-127,11,-44,54, 
  /* [94][0][][] */ 21,60,108,33,-127,-27,6,-4,20,-12,29,-9,-77,-25,27,-25, 
  /* [95][0][][] */ -32,57,27,45,111,18,-56,127,29,33,-126,124,-17,26,88,-81, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0013293139636516571, 0.0032842946238815784, 0.001666640629991889, 0.0019979795906692743, 0.0017249564407393336, 0.0031998548656702042, 0.0020685310009866953, 0.0028016706928610802, 0.0017976714298129082, 0.0024658369366079569, 0.0014902336988598108, 0.0024905039463192225, 0.0015066342893987894, 0.0013092107838019729, 0.0016216268995776772, 0.0024194717407226562, 0.0034754732623696327, 0.0022641147952526808, 0.0026035003829747438, 0.0017439735820516944, 0.0024074595421552658, 0.0020900378003716469, 0.0017437911592423916, 0.0017877304926514626, 0.0030292847659438848, 0.0021664774976670742, 0.0027437647804617882, 0.0020253448747098446, 0.0013461201451718807, 0.0026095828507095575, 0.0015135324792936444, 0.0029972617048770189, 0.0028198896907269955, 0.0016519211931154132, 0.0013793394900858402, 0.0016818030271679163, 0.0021381727419793606, 0.0019099727505818009, 0.0018584884237498045, 0.001483956933952868, 0.0022088843397796154, 0.001893135835416615, 0.0028235563077032566, 0.0019503647927194834, 0.0024180470500141382, 0.0018653047736734152, 0.0019487633835524321, 0.0021964849438518286, 0.0012009799247607589, 0.0017365125240758061, 0.0023471161257475615, 0.001446276088245213, 0.0015212236903607845, 0.0023210165090858936, 0.0022005238570272923, 0.0019810746889561415, 0.0020854161120951176, 0.0017845957772806287, 0.0026849058922380209, 0.0018082713941112161, 0.0026461195666342974, 0.0020453785546123981, 0.0022840288002043962, 0.0020327901002019644, 0.001481338869780302, 0.0020103016868233681, 0.0016409802483394742, 0.0019222698174417019, 0.0020152484066784382, 0.0023943537380546331, 0.0015798936365172267, 0.0013904582010582089, 0.0014117964310571551, 0.002473548287525773, 0.001891904859803617, 0.0012292721075937152, 0.0019133666064590216, 0.0017611104995012283, 0.0019237813539803028, 0.0025423690676689148, 0.0012618142645806074, 0.0021623591892421246, 0.0023207427002489567, 0.0023770460393279791, 0.002252156613394618, 0.0026425076648592949, 0.0020641270093619823, 0.0021717280615121126, 0.0022900647018104792, 0.0028521521016955376, 0.0021127278450876474, 0.0018054482061415911, 0.0018489271169528365, 0.0019543520174920559, 0.0026955793146044016, 0.0021186710800975561, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 7632, 14865, 896, -2950, -1727, 1229, 1445, 6617, 16365, -864, -7703, 5149, -9045, 8830, 8057, 14226, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.5383934522978961e-05, 7.4580369982868433e-05, 6.5682936110533774e-05, 5.9761481679743156e-05, 7.8129945904947817e-05, 6.2317281845025718e-05, 5.8510489907348529e-05, 6.1546168581116945e-05, 0.00010710334754548967, 7.672939682379365e-05, 8.9491280959919095e-05, 5.9867896197829396e-05, 9.0041656221728772e-05, 7.3790019087027758e-05, 8.2275073509663343e-05, 0.00010576793283689767, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -88,35,35,4,-57,-24,-69,-8,-48,16,26,-33,43,53,15,-30,34,7,80,8,14,-63,127,75,51,33,26,24,-56,-92,-77,8,-36,-36,26,45,-7,22,-19,17,1,5,-85,-3,-95,-28,2,88,-14,29,-27,-19,13,23,23,-47,-78,32,-37,69,34,25,19,4,-17,-72,-23,20,-60,-45,12,-21,4,-3,-80,-41,-48,-1,-56,9,-47,60,68,-51,14,59,37,61,43,-7,18,-17,-33,-44,-70,4, 
  /* [1][0][][] */ 40,24,-13,-37,-40,-21,-12,31,-23,20,57,-60,21,-6,-74,-27,12,16,-67,22,-10,-94,29,50,-4,-56,4,-47,62,-83,106,-61,47,16,-23,57,7,68,-33,-69,22,23,-8,-32,-15,47,-127,-37,-37,-49,-2,-31,53,-42,-29,50,23,4,-45,-13,3,26,-3,-83,-13,-38,-47,-18,15,9,-73,-18,-47,-18,-7,-49,24,31,14,-81,-15,-29,-91,-11,41,-13,-11,37,-63,-7,-40,47,20,45,-46,35, 
  /* [2][0][][] */ 95,-45,29,21,12,-85,69,-2,-8,-10,-37,17,-104,-30,21,-45,-107,-42,-47,28,16,-54,-49,-14,-17,-95,-6,-16,-38,34,-75,111,-63,127,-33,4,-10,-39,6,14,-109,61,86,32,-51,9,4,-28,8,1,-41,-41,45,-30,-39,63,17,-26,44,15,22,30,-38,10,53,6,-13,-7,33,38,-23,11,42,46,73,36,34,-60,62,55,74,-10,-18,25,-61,12,8,53,-6,-8,-23,43,-36,47,-14,27, 
  /* [3][0][][] */ -18,12,20,-6,-15,4,20,-50,-51,68,38,60,32,-11,-11,36,-11,-39,47,19,20,127,-10,-67,-20,4,-28,7,73,-40,66,21,-30,43,-7,-39,14,44,57,11,-78,-15,-52,29,3,24,31,6,-12,-54,-14,-22,12,-90,-12,-33,16,87,13,18,-1,0,-42,12,21,31,-48,15,-15,-9,18,-71,-21,-37,36,-18,20,-3,-30,-12,-40,7,-35,7,-26,-41,23,-40,16,22,14,-29,70,39,-47,50, 
  /* [4][0][][] */ 24,1,-70,20,48,24,-60,7,-35,85,115,-29,5,5,-15,-47,32,2,-45,43,11,-66,72,106,-58,29,-127,21,-53,-51,24,8,-66,-54,24,78,7,44,-18,19,-29,-36,60,-34,-33,7,-35,73,-31,66,32,21,58,8,-75,13,75,-10,-24,-29,28,-18,37,10,-38,10,-11,18,-55,51,-55,47,34,-70,-29,-56,30,-66,-27,5,-44,85,-81,12,-20,35,24,-52,59,27,41,6,-66,-30,36,19, 
  /* [5][0][][] */ -97,28,91,-15,41,-15,55,-55,-2,38,-8,15,71,-20,-19,-82,-2,-31,60,43,-127,-11,-119,18,-58,1,36,-30,42,-97,-22,73,82,115,-2,41,-12,23,61,-31,-17,123,86,-54,36,78,38,-1,10,34,-47,13,-17,-28,40,-68,45,5,-57,-35,83,104,-45,-34,116,-92,-84,-67,-48,-3,-61,-11,-28,21,-19,-35,-4,-27,-34,-32,122,-15,16,-104,-103,40,62,-13,-22,39,42,22,3,26,-3,90, 
  /* [6][0][][] */ 30,-22,-101,22,-9,-121,88,86,-53,54,-12,40,-127,-68,33,41,14,-38,5,5,-27,-18,-39,-29,-19,51,75,47,26,12,91,-80,27,15,18,-51,15,-10,11,71,33,-11,-53,-43,-20,-46,-68,39,44,-96,16,44,64,16,-15,-74,77,47,18,-43,-126,20,-82,9,59,41,1,56,33,29,-38,-47,-35,14,62,43,82,-41,48,-63,-30,-55,-89,63,36,-43,4,23,-24,61,51,23,-35,19,-7,111, 
  /* [7][0][][] */ 22,82,-22,-58,-37,-12,49,-15,-60,44,-65,-23,-57,20,24,-18,-64,-49,-33,56,2,127,-10,3,-3,-7,14,29,37,26,58,-47,62,28,-33,-8,14,-11,40,51,-69,-38,35,-35,35,-30,74,-42,22,-69,-101,-21,-55,-14,-6,-10,14,-16,-96,31,14,113,13,-30,-38,14,-64,27,-44,-40,-101,45,11,64,-9,36,-72,46,12,-81,-46,-50,61,-70,36,-40,-20,-16,-30,60,-97,31,51,-21,-38,22, 
  /* [8][0][][] */ -11,83,-75,54,-14,-22,-73,36,-94,-22,22,-5,-16,43,8,93,25,-37,2,18,31,-13,18,3,-28,86,19,21,-6,-7,-28,-23,-23,-52,-25,-54,-61,28,14,-16,1,-31,26,-9,-60,-36,0,-2,-6,-10,54,62,16,-3,-64,98,-14,48,-26,-54,-64,7,33,41,-19,-72,-20,-21,-43,27,-6,3,-23,-44,-127,-16,-41,25,-77,-42,-24,-6,-60,-28,7,21,35,36,21,73,-48,-1,-96,-121,19,-57, 
  /* [9][0][][] */ -12,25,-59,43,-40,-23,65,53,-10,42,-33,94,-34,-19,36,114,5,14,57,-10,16,6,36,-127,-54,-10,9,-6,3,-25,33,69,-26,4,3,-118,26,-32,-7,-19,-31,32,35,-6,-14,0,13,-13,10,81,12,0,-64,-85,-10,-10,-5,-32,69,5,-42,55,-62,-31,62,-21,-15,12,-70,14,67,45,-12,85,-2,-17,-30,46,-46,-21,48,-37,87,1,30,-40,-13,-35,-63,8,-2,0,68,26,-44,-16, 
  /* [10][0][][] */ 69,-5,-14,-21,-38,-25,68,-6,9,-27,-42,7,-97,-23,16,-6,-72,-24,18,19,50,36,3,-9,-34,51,21,-5,-46,-69,-38,-18,61,-30,42,-10,84,-61,82,127,21,-62,22,10,-7,-83,-2,43,18,69,-64,-29,-24,15,16,38,0,-62,80,60,1,45,-55,-12,-14,-42,3,56,19,-33,-10,27,101,27,40,-84,22,-47,63,-5,-51,26,42,19,-38,-20,-5,16,-38,-20,9,40,39,69,-24,17, 
  /* [11][0][][] */ -64,-21,33,-59,15,-34,8,-51,42,-34,10,-3,-7,8,-12,24,-64,15,57,7,-66,9,-72,-79,39,37,-48,65,27,-34,39,-20,8,7,13,-11,-68,34,-95,-23,-40,42,-18,106,-10,16,2,-52,6,-28,-39,-52,61,-4,72,-76,-35,-76,0,-67,-22,-33,-25,-110,12,-58,53,91,113,9,60,5,-51,-19,77,-39,84,58,20,45,14,-25,-12,127,101,-25,19,-30,-75,-48,-6,13,52,28,43,88, 
  /* [12][0][][] */ 55,-32,2,-45,32,72,5,17,64,53,-25,60,-30,34,20,9,-72,53,1,48,103,0,59,-58,44,11,-71,-62,-25,72,-24,-4,29,-7,-3,-53,66,4,-34,-18,27,-31,60,60,-18,28,14,-17,-69,16,8,23,-18,-23,8,7,-55,22,3,34,38,-76,4,-82,-23,95,-30,-26,-3,-36,59,12,-17,-5,17,28,-6,24,-60,-16,-31,30,127,6,-9,43,-32,-78,49,-13,-83,57,69,21,-18,-83, 
  /* [13][0][][] */ -6,10,13,-51,-19,-20,14,-30,34,-43,-45,-62,30,-102,-30,-63,-44,-35,-66,-5,-91,7,41,89,-36,0,86,15,23,-42,32,40,3,9,-127,107,-3,-56,33,-25,92,4,25,64,12,-74,73,-34,33,-10,-54,36,19,-5,-36,57,28,-88,-9,-6,47,36,-31,-86,-26,82,-40,20,-53,-31,-58,26,-87,23,-53,-76,-95,26,63,83,-27,50,60,-84,41,15,13,-15,-49,-43,-26,30,-44,6,-12,0, 
  /* [14][0][][] */ -7,25,-112,-6,92,84,-100,2,17,-51,108,-27,52,-12,-53,-72,-47,16,40,127,2,-44,5,4,-14,35,-21,63,28,-8,-19,12,68,-5,-33,19,-46,48,72,-6,50,15,10,-11,-42,-42,55,-43,32,-9,-7,-37,57,22,-43,23,32,81,-110,-20,-28,-74,-22,-117,22,-57,-41,-24,-82,49,-25,28,1,-28,-42,-25,43,-5,-69,-40,41,-1,-26,-14,3,60,-2,5,-30,63,82,19,-11,-57,-43,-72, 
  /* [15][0][][] */ -46,-42,62,-69,0,-32,-29,-97,11,15,-30,85,-48,-34,43,84,-127,-25,4,-63,34,-31,-24,-81,55,-35,29,-55,-67,-106,-88,7,-29,49,49,-98,19,-28,48,-2,-24,-20,40,0,20,8,61,74,-56,-20,6,-38,-56,29,-2,-61,-112,-41,93,35,1,21,-89,33,-76,8,-26,24,45,-85,78,-28,62,-40,-3,-42,-5,6,47,1,-21,71,62,6,-8,-32,-118,-15,-29,-66,-85,27,30,-11,-22,66, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0023538172245025635, 0.0031696655787527561, 0.0027915248647332191, 0.0025398628786206245, 0.0033205226063728333, 0.0026484844274818897, 0.0024866957683116198, 0.0026157121174037457, 0.0045518921688199043, 0.0032609992194920778, 0.0038033793680369854, 0.002544385613873601, 0.0038267704658210278, 0.0031360758002847433, 0.0034966906532645226, 0.0044951369054615498, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 450, -96, -333, -3259, -108, 2636, -1870, -1639, 864, -1460, 11809, -3271, -1483, 6091, 6423, -4379, 17763, -582, -3511, -193, -376, -11380, -1082, 191, -103, -5532, -3667, -3282, -2862, -5906, -3142, -1440, 13327, -3456, -2477, -278, -4597, -2968, -1579, 9454, -200, -48, 1364, -3924, 8830, 10929, -2570, 14101, -214, 10945, 11315, -2174, -224, 1431, 902, 15228, -547, -814, 13385, 2544, 6144, 14969, 9868, -10603, -228, -794, -2118, 1572, -5289, -1353, -1167, 4559, 10778, 9, -1225, 10487, -526, -250, 7631, -3808, 167, 12227, 4536, 2083, 10994, -1389, -5970, -3862, 1090, -7832, 18396, -373, -4651, -336, -2306, -6262, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00026831612922251225, 0.00022323486336972564, 0.00015519442968070507, 0.00026600353885442019, 0.00026359868934378028, 0.00023091251205187291, 0.00033462699502706528, 0.0002316081227036193, 0.0003324031422380358, 0.00016390638484153897, 0.00013148087600711733, 0.00023907140712253749, 0.00023286737268790603, 0.00017422180098947138, 0.00015270155563484877, 0.00017357125761918724, 0.00010873661085497588, 0.00016664060240145773, 0.00020193254749756306, 0.0001197066594613716, 0.00012994918506592512, 0.00017568135808687657, 0.00025403412291780114, 0.00017445100820623338, 0.0006985481595620513, 0.00014632882084697485, 0.00023107991728466004, 0.00012783535930793732, 0.00022476031153928488, 0.00011848135909531265, 0.00030758985667489469, 0.00018223638471681625, 0.0001223253202624619, 0.00011108967009931803, 0.00026685005286708474, 0.00025650954921729863, 0.00018864123558159918, 0.00018658193584997207, 0.00023120372497942299, 0.00013822974869981408, 0.00019794913532678038, 0.00017549707263242453, 0.00024710482102818787, 0.00014477602962870151, 0.00015210699348244816, 0.00010946108523057774, 0.00027086745831184089, 8.5201718320604414e-05, 0.00021725172700826079, 9.1976609837729484e-05, 0.00014194082177709788, 0.00015728028665762395, 0.00019622199761215597, 0.00013296958059072495, 0.00025712192291393876, 0.00010501506767468527, 0.00019811683159787208, 0.00020219101861584932, 0.00015097016876097769, 0.00013509704149328172, 0.00019943361985497177, 0.00012081965542165563, 0.00012546520156320184, 9.2975031293462962e-05, 0.00016161189705599099, 0.00032688153441995382, 0.00026544518186710775, 0.00024558065342716873, 0.0002685856306925416, 0.00022174714831635356, 0.00019833311671391129, 0.00012217671610414982, 0.00011148924386361614, 0.00022734649246558547, 0.00032533312332816422, 0.00010772475798148662, 0.00018779550737235695, 0.00020642798335757107, 0.00017336195742245764, 0.00024262676015496254, 0.00025856349384412169, 8.8968139607459307e-05, 0.00023077262449078262, 0.0001865724625531584, 0.00012212083674967289, 0.00024440037668682635, 0.00011651118256850168, 0.0002413774054730311, 0.00022372935200110078, 0.00013898831093683839, 7.7220545790623873e-05, 0.00030500962748192251, 0.00027253795997239649, 0.00031707336893305182, 0.00017560659034643322, 0.00020127800235059112, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 4,127,-19,35,-27,9,25,35,35,-49,-79,7,-23,-9,-8,-18,-105,25,-20,23,68,94,92,112,42,29,-33,4,23,34,25,-26,-96,21,-33,127,40,66,2,14,24,-32,3,87,-73,22,5,-27,-1,-74,-4,-13,15,78,-48,0,-84,-98,-41,-127,-53,14,-127,44,-37,37,53,-25,-3,40,67,-14,-29,10,61,10,-30,-39,-29,29,-44,-71,61,-13,-52,-39,-49,77,-104,-1,-124,47,60,-2,71,28, -23,-28,-24,57,-7,94,-28,22,32,34,-127,64,-78,4,-127,127,-127,87,-17,102,125,55,112,113,27,40,28,50,24,127,3,-127,57,127,15,110,65,120,-33,-89,127,-13,113,127,-9,-60,127,-107,9,-127,-127,-11,2,127,-41,-127,6,28,-127,-79,10,-127,-55,112,-30,75,127,-37,27,127,127,-11,-29,40,-42,-127,11,-43,-71,127,-28,-127,106,-57,-54,10,125,91,108,53,-127,15,127,-27,127,78, 30,-114,13,34,-23,-8,-11,33,24,69,-69,28,-28,77,-33,-41,-39,-5,-25,7,77,74,93,127,21,-10,41,17,27,17,8,-42,-57,-75,-23,96,25,14,3,-33,5,34,-26,46,-75,3,-3,27,19,-59,3,-9,-13,-7,5,-9,45,-106,-18,-70,-127,10,-114,18,49,38,-96,-17,-3,-7,57,-8,25,-33,-20,8,-15,-21,-29,27,-24,-85,43,-2,-46,-10,-63,44,-65,35,-94,57,26,49,28,3, 
  /* [0][1][][] */ 75,21,48,127,-11,-75,127,7,-40,-127,-45,127,2,-127,-84,13,-89,-53,63,18,-123,29,-127,-100,18,93,-118,127,-79,42,127,119,22,101,14,105,-91,59,-13,-18,55,-127,7,86,-127,-35,9,-127,-127,-43,-50,-6,127,-91,74,-32,-127,1,-60,31,-79,-119,-42,64,-102,-37,107,-44,-19,9,-48,-127,-127,52,127,-38,92,72,-68,-37,127,-89,-45,116,-35,-33,6,127,-12,-2,-89,19,13,-91,13,-10, -127,2,-127,94,-87,-127,-110,-127,30,-2,-6,28,-69,-29,-32,86,-72,-127,127,127,4,-127,-123,88,-127,127,31,112,-46,-34,-119,95,-127,117,127,-105,-2,127,127,-127,-40,31,9,114,-39,-127,-46,-115,13,-68,-44,127,-15,28,36,-119,9,44,92,-18,-23,-71,-76,127,6,-127,77,127,39,32,-113,-113,15,52,-107,-111,127,127,118,-56,-50,-33,-127,63,-41,-69,127,123,127,54,-93,-127,-56,-54,30,127, 60,-46,100,80,-11,-37,18,39,-54,99,-72,94,16,3,-59,71,-6,-53,47,-5,-127,33,-94,-57,10,36,127,-52,127,72,25,-120,-19,-110,-5,122,-76,51,-60,-99,9,119,10,108,-16,-14,18,-41,78,-124,-49,-19,71,-98,-127,3,103,3,-123,92,-78,-62,-32,63,127,-19,-51,-16,-22,-12,-2,-44,-112,-127,-7,-44,2,-17,-127,-16,-47,-59,-25,127,-127,-1,15,35,-56,-16,-44,37,-1,127,24,-17, 
  /* [0][2][][] */ 17,-54,42,18,23,25,43,44,-6,-52,-15,-26,52,-39,47,50,-43,59,-5,46,-1,87,28,-93,27,23,-21,-10,-21,14,28,77,-16,-20,-19,9,75,23,37,-10,-17,-35,-13,-32,18,-65,-7,-40,-20,47,-61,32,43,-4,-39,-34,-22,26,3,97,-31,-13,50,1,-52,51,-17,-8,13,29,19,64,-82,0,38,-17,-28,-32,-49,26,18,27,-34,-70,-2,46,38,12,-107,97,6,22,-10,-8,-10,-6, -49,15,125,31,127,83,-19,25,-127,1,-97,-91,127,-30,-39,57,-47,115,-7,-59,-4,68,53,-44,103,-16,5,-19,7,78,10,36,-108,75,32,11,127,93,92,-102,-34,-13,-127,51,9,-41,-4,-111,-15,-43,-97,50,105,-76,-6,-97,2,127,-29,54,106,-105,88,44,-27,10,-51,20,127,-1,-14,98,-112,14,-18,-100,6,-85,-35,3,-14,-23,-82,-97,22,127,115,47,65,127,3,37,-8,-17,-47,35, -3,38,17,29,12,14,-3,52,34,67,-46,1,27,-33,65,61,-13,-3,24,13,8,93,-1,-96,15,31,32,57,20,20,-6,-91,-34,-52,-29,2,64,24,21,-82,-10,-13,23,-47,8,-33,-7,-2,35,-41,-39,13,64,-19,22,-23,29,24,-26,64,-65,-2,3,16,51,45,-100,10,8,27,39,86,-3,-14,0,4,13,-19,-50,31,-3,-12,-34,-18,-54,37,24,4,-59,92,-7,33,-3,9,-7,-18, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.011403434909880161, 0.0094874817878007889, 0.0065957633778452873, 0.011305149644613266, 0.011202944442629814, 0.0098137818276882172, 0.014221646822988987, 0.0098433448001742363, 0.014127133414149284, 0.0069660213775932789, 0.005587936844676733, 0.010160534642636776, 0.0098968632519245148, 0.0074044265784323215, 0.0064898161217570305, 0.0073767784051597118, 0.0046213059686124325, 0.007082225289195776, 0.0085821328684687614, 0.0050875330343842506, 0.0055228401906788349, 0.0074664573185145855, 0.010796450078487396, 0.0074141677469015121, 0.029688296839594841, 0.006218974944204092, 0.0098208962008357048, 0.0054330029524862766, 0.0095523130148649216, 0.0050354576669633389, 0.01307256892323494, 0.0077450461685657501, 0.0051988260820508003, 0.0047213109210133553, 0.011341126635670662, 0.010901656001806259, 0.0080172521993517876, 0.0079297320917248726, 0.0098261581733822823, 0.0058747641742229462, 0.0084128379821777344, 0.0074586253613233566, 0.010501954704523087, 0.0061529809609055519, 0.006464547012001276, 0.0046520959585905075, 0.011511866934597492, 0.0036210729740560055, 0.0092331981286406517, 0.0039090057834982872, 0.0060324845835566521, 0.0066844122484326363, 0.0083394348621368408, 0.0056512071751058102, 0.010927681811153889, 0.0044631403870880604, 0.0084199653938412666, 0.008593117818236351, 0.0064162323251366615, 0.0057416241616010666, 0.0084759285673499107, 0.0051348353736102581, 0.0053322711028158665, 0.0039514387026429176, 0.006868505384773016, 0.013892464339733124, 0.011281419545412064, 0.010437177494168282, 0.011414889246225357, 0.0094242533668875694, 0.0084291575476527214, 0.0051925103180110455, 0.0047382926568388939, 0.0096622258424758911, 0.013826657086610794, 0.0045783021487295628, 0.0079813087359070778, 0.0087731890380382538, 0.0073678833432495594, 0.010311637073755264, 0.010988947935402393, 0.0037811459042131901, 0.0098078362643718719, 0.0079293297603726387, 0.005190135445445776, 0.010387015528976917, 0.004951725248247385, 0.010258539579808712, 0.0095084970816969872, 0.0059070033021271229, 0.0032818731851875782, 0.012962908484041691, 0.011582863517105579, 0.013475618325173855, 0.0074632796458899975, 0.0085543151944875717, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 5031, 3843, 318, -1623, 5236, 9082, 7506, 954, -274, 6978, 1475, -2575, 1917, 3932, 4, -1352, 2558, 5568, -570, 383, 2867, 18016, 6812, -1598, -3183, -892, 11949, 73, 1577, 1138, 7760, -1331, 8484, 2243, 5981, -4206, 411, -3647, 39, 2242, 1915, 366, 1048, -1229, 1135, 1916, 2215, 2622, 3208, 2761, 5266, 2665, -2392, 1369, 1339, 2447, 2123, 1440, 4208, 934, -1231, 5658, 2638, 3577, 3125, 9081, -3896, 2142, 4845, -788, 6441, 1084, 1864, 2761, 4620, 1185, -792, 2324, 2877, 3434, 2289, 1786, 5692, 1033, 1547, 4243, 714, -1586, 13418, 130, 627, -977, 10519, 3644, -58, -789, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00015603697102051228, 0.00011921373516088352, 0.0002630928938742727, 0.00020296064030844718, 0.00013130986189935356, 9.2401802248787135e-05, 0.00011432056635385379, 0.00020953980856575072, 0.00014807767001911998, 0.00010028688120655715, 0.00021216744789853692, 0.00016566851991228759, 0.00020813103765249252, 0.00013470531848724931, 0.00023331376723945141, 0.00014536442176904529, 0.00024599058087915182, 0.00011901123070856556, 0.00013071030844002962, 0.00020887836581096053, 0.00018041559087578207, 5.2707306167576462e-05, 0.00012338359374552965, 0.00013501598732545972, 0.00019670581968966872, 0.00016934188897721469, 8.0625461123418063e-05, 0.00018564243509899825, 0.00017951059271581471, 0.00018726057896856219, 0.00010381404717918485, 0.0002149782667402178, 9.5179297204595059e-05, 0.00017774630396161228, 0.00012649115524254739, 0.00013503919763024896, 0.00019096311007160693, 0.00015194817387964576, 0.00018193326832260936, 0.00017478532390668988, 0.00022957348846830428, 0.00024224056687671691, 0.00030131498351693153, 0.00022337722475640476, 0.0002791229635477066, 0.0001704065507510677, 0.0002464466670062393, 0.00020144601876381785, 0.00019011032418347895, 0.00016513971786480397, 0.00013890964328311384, 0.00017598953854758292, 0.00017895906057674438, 0.00024889482301659882, 0.00022198777878656983, 0.00019284806330688298, 0.00020068396406713873, 0.00016607160796411335, 0.00015347718726843596, 0.00022849156812299043, 0.00022474628349300474, 0.00012294098269194365, 0.00020085333380848169, 0.00017456774367019534, 0.00017249998927582055, 9.1330446593929082e-05, 0.00015503197209909558, 0.00019622143008746207, 0.00011874042684212327, 0.00023901616805233061, 0.00011383709352230653, 0.00017134423251263797, 0.00018524241750128567, 0.00016026903176680207, 0.00013782245514448732, 0.00017565341840963811, 0.00015284429537132382, 0.00015886266191955656, 0.00014647234638687223, 0.00014759843179490417, 0.00019052121206186712, 0.0001904493838082999, 0.00014520212425850332, 0.00014000953524373472, 0.00024102948373183608, 0.00015934499970171601, 0.00021025231399107724, 0.00023167976178228855, 6.6533226345200092e-05, 0.00024192062846850604, 0.00023660404258407652, 0.00022568630811292678, 8.3246130088809878e-05, 0.00012900419824291021, 0.00021076573466416448, 0.00013898174802307039, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -27,40,1,-45,-24,-9,-29,-15,23,-37,39,-23,78,-72,27,-127, 
  /* [1][0][][] */ -92,31,-101,-127,-80,44,-13,-8,-77,-12,79,-78,52,108,46,11, 
  /* [2][0][][] */ -22,-19,-24,-10,-21,-27,0,-48,-114,84,60,21,37,11,-51,127, 
  /* [3][0][][] */ -41,-52,-8,-35,-75,-5,-59,-115,5,29,32,-64,-49,-28,-127,-30, 
  /* [4][0][][] */ 93,20,3,51,-74,-49,-127,30,-3,46,17,85,-12,23,2,-67, 
  /* [5][0][][] */ -52,75,-72,-4,63,-50,-23,-124,127,-33,-5,-95,-5,-123,-86,-66, 
  /* [6][0][][] */ -33,-21,-25,7,-111,91,27,-7,-49,-30,127,-25,6,27,-125,58, 
  /* [7][0][][] */ -49,127,51,-98,98,68,24,-49,73,64,-71,-76,45,44,5,61, 
  /* [8][0][][] */ -46,-21,55,-28,76,15,112,127,-85,-15,-110,-41,68,122,-29,-119, 
  /* [9][0][][] */ 63,55,103,-18,-91,-22,-42,-127,15,-41,55,19,-14,-80,37,-63, 
  /* [10][0][][] */ -31,-111,48,-94,-127,98,26,31,-48,-51,7,41,-32,38,-79,49, 
  /* [11][0][][] */ 119,-72,-17,65,-127,17,30,20,28,91,-36,46,37,-58,10,72, 
  /* [12][0][][] */ -31,-6,127,10,45,-13,10,45,43,9,36,55,-22,98,-95,-7, 
  /* [13][0][][] */ -30,-27,33,4,18,-2,124,30,-102,22,14,-10,-43,127,95,-44, 
  /* [14][0][][] */ 127,-50,103,-14,68,78,116,36,86,44,69,34,77,-41,29,-77, 
  /* [15][0][][] */ -1,124,-11,-13,18,127,-71,72,-45,-22,-39,-20,-76,112,-53,-55, 
  /* [16][0][][] */ -42,45,103,-21,2,63,-24,-6,4,2,-13,36,61,-15,81,127, 
  /* [17][0][][] */ 49,109,0,-116,41,-63,9,-127,-16,68,-12,50,-61,-8,106,-65, 
  /* [18][0][][] */ -72,2,-36,-63,127,42,-29,-64,44,69,72,51,5,126,-64,-3, 
  /* [19][0][][] */ 37,127,77,56,45,-24,-24,-2,-29,88,44,84,74,59,-72,30, 
  /* [20][0][][] */ 75,-23,6,71,-38,-19,-30,42,-17,-78,-127,-40,96,-1,34,-18, 
  /* [21][0][][] */ -121,-62,-63,127,-60,39,-98,97,-36,19,26,5,-20,70,-61,75, 
  /* [22][0][][] */ 7,-17,-31,-41,127,20,-13,28,44,43,18,54,-33,14,-1,20, 
  /* [23][0][][] */ -89,7,-3,19,14,99,127,123,-48,99,5,-90,-10,74,-69,-41, 
  /* [24][0][][] */ 47,-53,23,-14,64,1,127,-42,75,73,15,24,-88,22,28,-64, 
  /* [25][0][][] */ 112,-64,53,53,13,-11,-10,98,90,-47,-66,-18,127,-49,68,57, 
  /* [26][0][][] */ 40,51,121,85,60,-20,-36,3,-32,41,19,127,12,-65,83,-42, 
  /* [27][0][][] */ -57,36,-60,9,-11,79,25,-75,48,-56,127,30,31,-46,93,80, 
  /* [28][0][][] */ -58,39,-49,-127,70,-41,48,-39,-84,58,-33,1,-5,37,-25,65, 
  /* [29][0][][] */ 100,127,-74,31,22,40,-40,-19,68,76,7,44,-98,-25,-35,82, 
  /* [30][0][][] */ -17,114,-127,-83,97,-41,38,-8,-33,48,-74,-5,37,72,18,66, 
  /* [31][0][][] */ 45,-69,79,60,62,-39,-74,30,-41,-26,23,-45,-69,70,45,127, 
  /* [32][0][][] */ -49,84,-19,29,-84,72,33,34,0,-127,25,-86,17,71,45,43, 
  /* [33][0][][] */ -127,-30,48,104,-2,18,-66,39,-45,-47,16,-6,-8,14,11,114, 
  /* [34][0][][] */ -5,21,-78,-108,61,-9,-2,89,14,-31,-4,-39,-56,-29,-40,127, 
  /* [35][0][][] */ 74,-14,47,-2,8,26,-127,-27,-22,-107,-61,48,10,-27,70,-41, 
  /* [36][0][][] */ -41,26,-127,-11,2,56,-1,52,-33,5,78,50,-4,50,-71,11, 
  /* [37][0][][] */ 49,47,50,-34,48,-120,41,13,-127,53,-81,9,5,69,126,26, 
  /* [38][0][][] */ -12,99,43,-38,19,37,43,-60,18,-2,-127,40,-45,-87,-82,-3, 
  /* [39][0][][] */ 56,94,-91,-127,-10,-4,4,-84,13,38,13,-61,56,5,-114,-60, 
  /* [40][0][][] */ -36,3,-73,-91,-31,24,29,-127,-11,10,4,-43,65,88,28,52, 
  /* [41][0][][] */ -46,-86,6,127,-11,-14,-75,-46,-29,-38,63,-62,-71,-7,45,50, 
  /* [42][0][][] */ -38,78,-1,-127,-6,-7,-17,-26,66,-3,-27,5,13,-20,1,-2, 
  /* [43][0][][] */ -6,34,14,16,123,22,-5,5,28,42,3,-106,-127,-51,2,10, 
  /* [44][0][][] */ 76,-19,13,31,-11,4,8,54,42,-44,51,-13,127,-3,-72,-41, 
  /* [45][0][][] */ -5,-89,-91,22,-20,-114,12,80,26,-50,45,9,-82,127,47,-3, 
  /* [46][0][][] */ -15,-58,39,39,-8,-16,-69,8,7,-12,2,-9,39,16,46,127, 
  /* [47][0][][] */ -25,-45,14,65,4,-7,59,-2,32,-43,-127,-24,44,-27,-55,13, 
  /* [48][0][][] */ -125,119,0,-40,11,67,-50,-127,-16,2,62,-61,40,-93,-47,-7, 
  /* [49][0][][] */ -57,8,31,-49,17,1,121,127,-28,-19,0,37,-31,40,-52,29, 
  /* [50][0][][] */ 3,-20,-67,55,38,-105,-70,-5,-39,95,-38,-3,22,-89,-127,-46, 
  /* [51][0][][] */ -42,66,-29,127,-33,36,-53,-76,-10,-43,20,-22,5,36,-5,107, 
  /* [52][0][][] */ -115,13,21,21,24,23,71,21,19,-86,-53,-22,-81,-74,-127,-22, 
  /* [53][0][][] */ -20,-56,-41,-127,-49,6,27,35,53,-67,-102,24,3,43,73,44, 
  /* [54][0][][] */ -13,-52,4,-5,-59,98,49,17,-30,-104,35,3,-20,8,-127,51, 
  /* [55][0][][] */ -4,-24,-40,42,50,-4,51,69,-68,-71,-127,-36,38,-48,-13,24, 
  /* [56][0][][] */ 21,-42,-49,5,-44,40,-127,15,18,27,5,6,57,-36,36,29, 
  /* [57][0][][] */ -70,-10,50,-2,127,52,70,41,-11,45,-3,-39,-41,71,-77,37, 
  /* [58][0][][] */ 35,10,-14,-4,34,0,-31,-45,59,-127,-51,13,-62,-32,-18,22, 
  /* [59][0][][] */ -26,-7,1,-13,21,27,-38,-25,63,127,-64,14,17,-5,-58,-8, 
  /* [60][0][][] */ 14,-26,2,8,-127,-24,35,7,-16,31,-13,23,-14,-38,43,31, 
  /* [61][0][][] */ 51,64,-126,-50,-76,-32,-90,-85,-48,-4,23,95,93,-34,127,9, 
  /* [62][0][][] */ 24,-18,28,21,-12,-3,9,127,-37,100,13,54,25,45,42,48, 
  /* [63][0][][] */ 20,-127,-38,-15,-82,7,64,-21,8,-8,7,-20,-25,127,111,31, 
  /* [64][0][][] */ -20,13,-103,-50,49,40,-25,-67,-27,-81,91,12,86,-47,-64,127, 
  /* [65][0][][] */ -45,-18,36,55,29,7,103,80,-103,-1,-98,-32,81,127,-56,25, 
  /* [66][0][][] */ -44,-123,-31,-83,-71,-127,41,-11,6,-37,36,74,-72,-52,-53,78, 
  /* [67][0][][] */ -46,-95,-83,-3,-81,119,-28,-127,-97,-49,-73,-115,-24,-29,-63,25, 
  /* [68][0][][] */ 86,14,38,1,-88,38,-68,-75,-104,-127,-40,-34,54,-30,104,-43, 
  /* [69][0][][] */ 45,12,23,-22,-7,-48,-38,29,-8,127,-16,10,16,35,65,-40, 
  /* [70][0][][] */ 28,-32,-59,76,-77,8,9,-91,127,101,17,72,58,-80,-37,51, 
  /* [71][0][][] */ 121,-64,10,127,-99,-16,35,14,105,-1,-10,27,29,-18,56,18, 
  /* [72][0][][] */ -5,-34,24,127,52,-40,-75,104,76,-25,76,27,-54,-34,-42,74, 
  /* [73][0][][] */ 51,15,43,-127,79,-74,-73,25,10,41,-20,-22,-24,-91,-1,-38, 
  /* [74][0][][] */ 127,42,40,-14,-117,-9,17,2,-112,-49,25,-31,44,-35,-9,2, 
  /* [75][0][][] */ 74,127,-88,21,66,35,-24,-7,-34,-42,36,69,-99,53,48,71, 
  /* [76][0][][] */ -85,-35,-9,-54,-98,3,127,-21,-70,18,121,51,-49,-124,-24,108, 
  /* [77][0][][] */ -30,127,-30,19,-62,-48,55,66,29,-52,-30,42,-43,56,34,53, 
  /* [78][0][][] */ 97,27,-84,7,-75,39,-77,13,12,-28,-39,-6,48,-127,15,53, 
  /* [79][0][][] */ -104,-25,97,96,-31,-64,-38,-76,-56,22,30,38,-27,107,-38,127, 
  /* [80][0][][] */ 41,91,25,-86,7,35,127,-19,-4,5,-67,3,78,3,-4,12, 
  /* [81][0][][] */ 33,-44,-17,-122,81,39,12,127,38,-7,8,-76,-11,32,-64,-40, 
  /* [82][0][][] */ 43,49,38,-16,82,-46,9,63,-23,127,-33,60,-3,-60,-2,-65, 
  /* [83][0][][] */ -49,82,6,22,89,85,103,127,49,91,-31,-124,-95,66,-73,-114, 
  /* [84][0][][] */ 4,-88,-35,66,-24,-79,-73,25,-72,76,-58,-23,-127,44,-25,-28, 
  /* [85][0][][] */ -58,98,-68,-10,-48,-30,-64,-32,20,52,-9,-127,-111,-72,-39,17, 
  /* [86][0][][] */ -25,60,127,118,-26,-44,29,13,4,51,-53,-73,44,57,-94,-53, 
  /* [87][0][][] */ -15,22,127,-21,-77,-35,16,3,43,-8,-2,66,-30,-2,-26,-11, 
  /* [88][0][][] */ -53,-84,-127,36,26,20,27,45,-22,-93,-84,-103,107,-33,13,82, 
  /* [89][0][][] */ 50,42,10,-114,0,-66,-42,64,112,-20,61,-127,-15,-12,87,-47, 
  /* [90][0][][] */ -17,69,46,11,-36,40,27,127,-8,-46,-18,116,51,44,-51,110, 
  /* [91][0][][] */ -47,13,29,67,48,69,-7,-101,-67,29,-21,45,-127,-105,-23,-26, 
  /* [92][0][][] */ -29,82,0,-34,-127,-22,-89,50,-32,60,68,107,-14,-30,39,7, 
  /* [93][0][][] */ 114,49,127,37,-125,-60,4,33,-73,-55,-34,-57,32,-46,-9,17, 
  /* [94][0][][] */ -20,-94,40,-127,23,51,-5,0,77,-43,-1,59,12,64,-62,30, 
  /* [95][0][][] */ -42,-85,-36,-54,127,102,-46,8,119,59,-75,76,-23,108,-79,15, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0020706274081021547, 0.0015819791005924344, 0.0034912708215415478, 0.00269330944865942, 0.0017424960387870669, 0.0012261818628758192, 0.0015170462429523468, 0.0027806158177554607, 0.0019650065805763006, 0.0013308177003636956, 0.0028154847677797079, 0.0021984390914440155, 0.0027619211468845606, 0.0017875541234388947, 0.0030960987787693739, 0.0019290015334263444, 0.0032643214799463749, 0.0015792917693033814, 0.0017345398664474487, 0.0027718383353203535, 0.0023941341787576675, 0.0006994316354393959, 0.0016373136313632131, 0.001791676739230752, 0.0026103074196726084, 0.002247184980660677, 0.0010699084959924221, 0.0024634951259940863, 0.0023821247741580009, 0.0024849679321050644, 0.0013776235282421112, 0.0028527847025543451, 0.0012630395358428359, 0.0023587124887853861, 0.0016785511979833245, 0.0017919846577569842, 0.0025341010186821222, 0.002016368554905057, 0.0024142740294337273, 0.002319419989362359, 0.0030464648734778166, 0.0032145583536475897, 0.003998482134193182, 0.0029642398003488779, 0.003703991649672389, 0.0022613131441175938, 0.0032703739125281572, 0.0026732103433459997, 0.0025227845180779696, 0.0021914218086749315, 0.0018433459335938096, 0.0023354000877588987, 0.0023748059757053852, 0.0033028610050678253, 0.0029458017088472843, 0.0025591144803911448, 0.0026630978100001812, 0.0022037881426513195, 0.0020366588141769171, 0.0030321076046675444, 0.0029824073426425457, 0.0016314400127157569, 0.002665345324203372, 0.0023165326565504074, 0.0022890933323651552, 0.0012119648745283484, 0.0020572908688336611, 0.0026038794312626123, 0.0015756982611492276, 0.0031717701349407434, 0.0015106304781511426, 0.0022737563122063875, 0.0024581868201494217, 0.0021267873235046864, 0.0018289186991751194, 0.0023309397511184216, 0.0020282601471990347, 0.0021081245504319668, 0.0019437038572505116, 0.0019586470443755388, 0.0025282369460910559, 0.0025272837374359369, 0.0019268477335572243, 0.0018579416209831834, 0.0031984872184693813, 0.0021145252976566553, 0.0027900708373636007, 0.003074415260925889, 0.00088290305575355887, 0.0032103126868605614, 0.0031397610437124968, 0.0029948814772069454, 0.0011046851286664605, 0.0017118996474891901, 0.0027968839276582003, 0.0018443027511239052, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -25974, -5193, 3421, -12242, 11728, -11829, 23070, -8473, 8540, -7346, 15005, 10925, 3707, -28017, 2632, 4833, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.3802624430973083e-05, 5.9223795688012615e-05, 7.8298355219885707e-05, 7.309749344130978e-05, 9.3999835371505469e-05, 0.00014243421901483089, 7.6183860073797405e-05, 7.7295517257880419e-05, 0.00011069078027503565, 9.0231835201848298e-05, 0.00010395455319667235, 7.7362907177302986e-05, 8.9118650066666305e-05, 0.00010278859554091468, 6.734475027769804e-05, 0.0001067777702701278, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -14,26,27,4,-40,-105,-8,1,-10,-102,47,-15,40,-89,73,37,-89,-29,48,-4,97,46,-63,-19,8,54,127,75,-25,78,103,-24,27,-20,-3,-10,53,38,1,-22,115,21,21,-31,3,-1,6,-52,30,-14,93,-22,-43,10,47,25,3,-29,2,16,-18,24,-40,-12,22,12,54,18,-11,-51,22,19,4,42,6,50,62,-66,53,27,-7,22,53,46,-74,11,-11,61,1,17,-84,-17,25,14,117,100, 
  /* [1][0][][] */ -8,31,-67,-17,-4,-49,98,-113,-53,-40,-45,-67,-31,-55,-12,-45,-44,-34,-47,-14,9,-77,106,-64,-34,31,0,73,-59,1,-18,36,-22,44,37,25,-31,69,-34,77,29,28,-4,-47,30,-15,11,19,-93,7,54,-86,-21,68,41,44,82,39,-105,5,-35,12,28,-30,34,27,122,2,-74,-127,10,-8,14,79,-20,45,-64,-40,115,-33,1,-29,73,-51,-28,-78,-23,-2,-37,-28,53,13,57,-58,-24,67, 
  /* [2][0][][] */ 13,-31,14,-25,78,30,-57,14,-59,66,1,-45,51,-10,26,27,24,-23,-127,-20,-10,-30,5,56,4,9,-42,24,12,-14,-27,69,-27,-38,20,-3,-53,-8,-35,-20,54,27,18,25,-6,28,-1,4,-106,18,-21,42,-11,53,14,-47,29,-16,57,25,18,-13,-20,65,33,-3,-25,21,-30,26,-25,-3,30,43,27,54,-42,14,-29,-47,14,30,19,-30,-12,-54,-23,-49,-8,-24,-14,62,4,-18,80,-89, 
  /* [3][0][][] */ 64,-45,-25,-94,-1,-18,90,0,32,127,-54,-34,-2,-14,-12,39,83,83,-30,17,-63,8,55,14,18,88,36,5,17,-20,-103,74,-27,-30,2,-28,29,-79,-44,73,-6,8,-29,26,82,-75,-25,31,27,-36,27,-46,127,35,0,-13,-2,-21,4,-27,-27,25,56,13,-22,-20,126,-48,-22,-4,-41,53,27,-83,-24,-84,-1,-58,122,-22,-6,-62,-26,-52,-72,-33,73,74,-13,40,-79,-10,-3,-87,-10,24, 
  /* [4][0][][] */ -37,47,33,-23,-40,39,-29,-59,13,-29,-6,-25,16,48,-25,40,-24,-48,-5,-57,32,-20,-56,3,-37,-42,-31,3,-40,127,-50,-11,19,-21,5,-5,40,69,-2,-5,26,15,34,-39,-92,9,82,-33,40,-42,-42,2,-62,44,28,14,28,62,-15,31,-42,-78,-24,1,61,9,-36,-13,6,17,9,-74,-21,53,72,54,-24,-6,-48,38,5,61,48,-52,56,-86,-17,-80,-48,-50,-4,-5,-24,-22,28,-26, 
  /* [5][0][][] */ 4,-12,11,-9,2,1,-12,-8,22,26,-38,31,-10,-21,5,-17,-6,-12,-45,-37,-28,1,-15,34,-2,-59,56,-21,-22,38,4,65,-18,-89,4,15,-40,-15,-17,-10,-44,-4,-5,3,2,7,-71,33,-19,14,43,-4,22,-52,-5,17,-21,-54,9,-39,44,45,11,30,-40,5,100,-6,19,-38,11,4,4,23,32,1,2,7,127,52,2,-13,-42,33,50,69,15,104,-6,-36,-10,5,18,-30,-40,26, 
  /* [6][0][][] */ 38,-59,50,7,-40,98,-51,-66,8,-35,-81,44,-11,8,-49,63,-10,8,6,-26,-94,-14,-76,-43,-12,-49,-11,82,-127,22,2,-11,37,44,-32,2,-4,-38,-21,-41,-29,39,35,14,28,26,-86,-13,11,-9,-98,-110,40,25,-38,-10,8,-17,29,-44,-21,-1,6,26,39,-73,-55,-39,-110,11,-7,-34,-19,-96,7,-71,72,29,-62,37,-47,43,42,-69,63,-36,12,-18,-92,39,-68,94,21,-5,49,-61, 
  /* [7][0][][] */ 11,-1,-53,44,3,31,44,-7,-99,11,75,50,24,-39,-10,-33,3,7,4,-6,-63,-29,-34,-14,72,45,-3,71,48,28,-22,10,-69,-127,12,65,-17,-11,-48,23,-23,-7,22,-71,23,8,48,75,-48,37,-36,28,-1,-43,40,-27,-31,14,-62,-23,73,-22,-28,-8,52,-65,103,-10,-63,-3,58,35,-11,-22,-73,-26,39,-13,103,-51,-5,-1,-82,-39,42,45,-65,50,2,-1,-2,34,62,-23,77,-37, 
  /* [8][0][][] */ -35,-59,14,-3,-22,-12,23,-27,-13,-10,46,37,2,12,-42,7,46,-5,18,5,2,-42,-32,-23,-23,-55,65,0,-46,53,28,-26,10,22,14,21,-55,1,41,-32,5,47,33,-49,-8,28,36,-19,55,-2,56,10,31,19,-53,-9,9,112,-59,8,-20,-50,-22,-42,-80,-37,-12,27,-17,5,44,-24,-17,-127,54,-104,14,-11,-45,32,-35,-7,24,65,62,-80,-37,47,-44,108,35,-15,-55,5,-7,-49, 
  /* [9][0][][] */ -38,-30,-37,25,8,24,14,33,-59,-4,99,51,-39,68,32,-55,-6,23,-31,-41,-1,10,-14,-7,-3,43,1,25,49,-10,10,-4,-22,-29,-8,35,-21,-32,17,3,-27,-19,7,14,22,15,-11,24,-42,17,-18,45,127,1,-12,-17,27,-3,44,19,-33,-25,67,50,13,14,61,-19,30,10,-20,32,-2,-118,-37,-124,-42,-14,32,-16,2,24,9,-41,47,14,-64,-7,2,98,27,36,42,27,-3,22, 
  /* [10][0][][] */ 47,61,11,15,0,20,-40,-26,67,18,-42,29,28,18,-10,-82,-36,1,17,-6,23,-44,-21,-32,27,-18,-106,55,-16,51,-19,1,12,16,-36,-17,13,-12,-20,11,50,-8,51,-42,-17,-42,10,38,17,4,10,-10,-43,-16,8,53,-40,13,-8,-8,-22,-57,-33,17,-3,-18,-109,-29,-42,-20,52,-13,-30,32,34,23,58,7,-101,9,-1,47,-3,-7,5,38,-84,-127,-13,18,-19,23,60,-48,21,35, 
  /* [11][0][][] */ 36,-43,10,-2,-67,37,32,15,89,-15,-39,-61,34,28,-17,18,-12,60,28,-70,14,37,26,24,50,36,50,-2,50,-49,-61,3,-1,104,-107,9,11,-27,61,30,-82,35,-19,1,-51,-29,-16,-16,61,-20,-33,-3,-39,20,-58,100,-44,-6,-18,-46,29,-20,-43,-83,-26,-82,-127,-91,16,-41,-99,58,81,0,10,-15,38,78,-103,-49,2,0,-42,3,-24,-22,80,94,25,-68,7,18,-37,43,101,5, 
  /* [12][0][][] */ 23,39,-51,-11,5,-32,8,34,49,-27,20,-4,0,-13,-13,10,12,-35,-32,17,-5,59,7,55,-59,-38,-127,-1,72,-25,35,2,-38,-96,62,-18,46,-24,-14,23,-14,-53,6,28,47,-20,7,-21,-91,1,-60,85,39,-12,36,-70,-20,9,-46,-55,13,55,60,32,-27,7,6,33,121,35,20,33,1,-16,-15,-3,-49,-44,27,-59,37,-76,19,-60,8,3,0,-99,-10,32,-39,35,14,46,23,49, 
  /* [13][0][][] */ 1,30,-87,31,24,25,-3,17,18,76,-55,56,-28,-1,58,-61,16,55,54,25,-54,-75,-14,23,41,37,-25,20,28,50,30,-23,-33,77,-3,41,27,-67,-80,-49,9,-9,29,14,44,21,-36,53,-66,46,-13,19,-47,-59,66,45,-3,-49,10,-15,24,30,-19,1,17,100,127,38,44,45,-57,2,29,47,-87,52,15,-60,121,-47,-10,-31,13,-21,39,76,-38,-27,-36,-33,1,65,38,-1,55,56, 
  /* [14][0][][] */ -5,49,9,22,-87,-36,3,11,-50,-20,59,-9,-90,-14,40,-11,-50,42,-55,33,-27,29,-115,4,-47,5,-76,-125,9,1,56,74,-52,48,26,-24,-13,-69,-38,-25,34,-29,48,-32,-35,45,-89,26,0,-55,69,20,-1,15,-17,30,-71,26,-20,27,36,44,5,9,34,-35,5,-89,20,51,57,34,-48,50,24,29,44,10,36,18,-62,97,24,-127,78,-30,-14,9,-104,-14,-39,8,-33,44,40,29, 
  /* [15][0][][] */ 72,-17,25,35,29,-7,8,-5,9,29,-60,-10,75,65,-9,-25,-7,21,-66,42,-2,-37,19,46,48,-22,75,22,65,-24,-51,41,35,42,2,-76,51,35,36,65,62,37,-22,-4,-29,-127,17,-22,-33,-13,-5,14,-29,-41,1,58,-28,-11,-11,-7,8,-41,-54,56,25,43,-74,39,-8,-18,-6,-11,4,-95,-36,-87,-21,40,-110,26,79,-18,0,11,-40,22,-15,2,43,65,-6,-51,-9,-42,24,-54, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.003561611520126462, 0.0025170112494379282, 0.0033276800531893969, 0.003106643445789814, 0.0039949929341673851, 0.0060534542426466942, 0.0032378139439970255, 0.0032850594725459814, 0.0047043580561876297, 0.0038348529487848282, 0.004418068565428257, 0.0032879235222935677, 0.0037875424604862928, 0.0043685152195394039, 0.0028621519450098276, 0.0045380550436675549, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 12655, -2352, -6961, 11165, 68, -1896, -360, -37, 1750, -6170, -639, -2031, 12830, -4997, -2914, -7800, 1699, -448, -8397, -2115, -2985, 86, -3555, -936, 94, 13004, -7969, -7917, 1257, -1361, 820, -3272, 8782, 238, -1359, -1388, 857, 11273, 610, 7718, -149, 2305, 498, 8196, 774, 99, 13281, 5549, -9102, -394, -3798, -2945, -175, -2598, -7525, 4754, 4, 2966, 266, 5181, -771, -1123, -2630, 4010, 11033, 1241, 12755, 9627, -1009, -143, 9004, -657, 711, 2194, -1961, 435, 19694, 18719, 8610, 9908, 11950, -903, 7234, 11595, -3124, -2080, 5615, -6489, 8545, 2275, -8345, -5968, -1686, 1133, 15104, -1302, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 9.7344360256101936e-05, 0.0002882359258364886, 0.00012266938574612141, 9.7147792985197157e-05, 0.00026784415240399539, 0.0004829317913390696, 9.6546849817968905e-05, 0.00020369907724671066, 0.0003868373460136354, 0.00018535331764724106, 0.00032826475217007101, 0.00017571354692336172, 0.00010033619037130848, 0.00012132807023590431, 0.00023566775780636817, 0.0001479956554248929, 0.00028867810033261776, 0.00038582822890020907, 0.00016796149429865181, 0.00043178297346457839, 0.00026113985222764313, 0.00022875252761878073, 0.00015423449804075062, 0.00021183970966376364, 0.0019473255379125476, 0.00011215762060601264, 0.0002398889628238976, 0.00012176786549389362, 0.00042196601862087846, 0.00015460472786799073, 0.00021103695326019078, 0.00021754074259661138, 0.00011883840488735586, 0.00057757511967793107, 0.00017246643255930394, 0.00018997113511431962, 0.00034173470339737833, 0.00010300472058588639, 0.00025168497813865542, 0.000150679872604087, 0.00054649094818159938, 0.00020274336566217244, 0.00019414690905250609, 0.0001293734967475757, 0.00020376047177705914, 0.00026831429568119347, 0.00011622898455243558, 0.00019790331134572625, 0.00015325998538173735, 0.00042633313569240272, 0.00028405894408933818, 0.00021351304894778877, 0.00013654917711392045, 0.00032141350675374269, 0.00018897933478001505, 0.00021344015840440989, 0.00021582991757895797, 0.00046155496966093779, 0.00049003306776285172, 0.00020246041822247207, 0.00036116412957198918, 0.00026071522734127939, 0.00013728367048315704, 0.00018016083049587905, 0.00019447146041784436, 0.00044156270450912416, 0.00011464023555163294, 0.00011754541628761217, 0.00029756815638393164, 0.00047331646783277392, 0.00011410759179852903, 0.00032533545163460076, 0.00067684397799894214, 0.00016701384447515011, 0.00018646121316123754, 0.00023975546355359256, 6.5493433794472367e-05, 0.00010414109419798478, 0.00012091927783330902, 0.00015191927377600223, 9.9627533927559853e-05, 0.00026157381944358349, 0.00015257394989021122, 0.00025781951262615621, 7.8648183261975646e-05, 0.00044978511868976057, 0.00018572757835499942, 0.00023576617240905762, 0.0001453648874303326, 0.00021093249961268157, 0.00010611413017613813, 0.00023131497437134385, 0.00037962585338391364, 0.00017411154112778604, 9.3754984845872968e-05, 0.00031886406941339374, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -89,-1,-8,-38,69,10,29,-52,-9,30,-9,-32,-39,31,1,-5,-27,15,6,-20,-8,34,-64,45,-16,-42,-39,13,18,1,38,11,8,2,-3,-18,-2,-75,-45,-8,15,28,46,-33,-21,43,-42,-25,-12,6,-14,74,-92,34,69,-33,-7,-14,2,-16,-7,-13,20,-73,-24,-40,-39,-82,-24,27,-12,-6,36,-3,-15,-13,-41,-66,127,-68,-51,3,-127,-49,54,1,29,26,-94,-24,8,-23,4,31,18,-3, -16,46,42,-127,-41,23,98,-47,6,-9,-49,4,-108,24,-69,34,-13,64,61,-37,-17,127,25,126,9,31,47,101,127,58,127,-13,-43,-15,-118,-42,-7,-17,127,-49,-35,-127,-26,-64,39,-25,-1,-25,74,6,27,127,-101,41,-48,-21,-71,2,-11,31,-11,-127,-127,-7,-60,-1,15,-112,-6,2,-40,117,-127,-23,17,-31,-127,-127,-1,-127,-68,9,-27,-78,127,51,-39,37,-127,-10,59,-7,7,127,-29,-104, -64,6,9,-7,58,19,65,-73,-19,45,-20,24,-60,18,3,-8,-24,-4,-15,-30,-23,24,-28,45,-10,-68,-21,-17,17,3,30,25,3,-2,-8,47,-11,-109,-78,-5,6,87,-3,-29,-16,-32,-17,-26,28,0,-14,24,-5,3,62,-28,48,-8,12,-23,-11,-4,-41,-120,-32,-46,127,-65,-29,18,0,4,15,-9,-15,13,-36,-27,-35,-83,-9,0,-78,-63,67,-7,34,-23,-60,-52,8,50,17,30,-17,-6, 
  /* [0][1][][] */ -89,-8,52,-71,40,103,-4,-21,-7,-10,-12,-52,-127,26,20,104,-20,47,35,45,40,-14,127,-18,41,14,55,15,-20,23,1,0,-127,-15,66,-4,-11,-91,-17,-127,-7,26,99,-40,-63,127,-127,-98,85,65,12,-13,-127,45,80,-50,37,-35,36,-26,8,-5,98,-43,-33,17,-21,-14,5,-1,-127,-4,19,127,8,-74,-68,-95,-70,-27,-36,-12,-22,-61,72,33,-112,46,-20,127,109,-55,127,3,-64,4, 127,127,127,124,-127,-127,127,-52,127,127,-63,-95,-67,127,-19,127,127,-127,127,127,127,-95,60,-127,-127,-127,127,127,-106,127,-39,127,-50,127,127,-102,127,94,27,-28,127,5,-127,-127,127,-14,114,123,127,-127,127,-82,99,127,-127,127,-127,127,-127,127,-74,111,75,-127,123,127,-17,127,-100,-127,-1,-127,-6,118,127,85,13,-32,103,-87,-43,127,53,127,63,46,-127,127,-11,55,2,6,-82,-21,-127,-27, -119,-21,48,-89,-9,55,-30,4,-44,17,6,127,-97,27,15,97,-34,56,42,22,35,-30,59,-27,40,-6,24,14,-18,0,-4,2,-67,-30,87,127,-6,-127,-65,-118,-13,7,36,-34,-73,-81,-124,-127,102,78,-9,-53,124,1,117,-64,113,-24,49,-49,-4,-10,-108,-50,-72,-11,-55,-57,-6,11,-67,-24,4,-94,7,127,-55,-68,-45,20,-52,-19,-76,-91,29,48,-88,43,-13,-104,127,127,-33,-18,-69,9, 
  /* [0][2][][] */ -99,-43,-9,-23,31,5,-7,55,-18,25,41,-27,25,-11,3,-29,-16,-2,-32,-11,10,-10,16,-7,5,-72,-21,20,-23,-58,-24,6,28,-1,5,-9,-13,-93,-6,37,-39,53,0,4,11,24,-101,-26,-13,10,-7,35,30,-50,51,-35,0,-41,13,-61,7,30,23,100,-35,-33,119,60,34,34,-42,2,-23,-15,-18,-32,-22,-60,-29,19,-90,0,-20,-7,-3,0,68,-21,-16,-5,-55,12,-14,-23,-4,-8, -49,-50,52,-125,-22,-3,52,127,-42,83,127,-21,-71,70,127,55,-11,-51,85,-38,-18,-47,82,46,4,2,53,71,-2,-37,-107,-25,-15,-36,-118,11,-93,-73,75,0,-48,-107,-34,81,30,-26,-96,-14,18,6,6,2,84,-2,-26,-50,-63,-49,43,-91,127,38,119,81,-127,-61,-17,-22,127,30,-71,13,-5,-43,12,-23,-33,-67,13,93,-127,-11,-43,-57,12,-127,24,10,-51,-3,89,16,24,-114,-65,127, -74,13,31,-15,17,-6,20,27,-23,37,19,63,20,1,-4,4,-24,21,4,-27,1,-12,-35,-9,1,-56,-21,15,-27,-41,-30,9,31,-1,21,-3,-23,-22,-17,49,-39,-83,-5,-1,-8,-28,-89,-15,-21,9,-1,-19,-4,-61,43,-33,73,-25,16,-38,2,20,12,74,-30,-17,-19,39,24,12,-88,25,-55,-50,-30,-28,-22,-23,102,-16,-85,-11,-10,6,1,12,65,4,-13,-13,-36,42,8,-21,-9,0, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0041371351107954979, 0.012250026687979698, 0.005213448777794838, 0.0041287811473011971, 0.011383376084268093, 0.020524600520730019, 0.0041032410226762295, 0.0086572105064988136, 0.016440587118268013, 0.0078775156289339066, 0.013951252214610577, 0.0074678258970379829, 0.0042642881162464619, 0.0051564429886639118, 0.010015879757702351, 0.0062898155301809311, 0.012268818914890289, 0.01639769971370697, 0.0071383635513484478, 0.01835077628493309, 0.011098443530499935, 0.0097219822928309441, 0.006554966326802969, 0.0090031875297427177, 0.082761332392692566, 0.0047666989266872406, 0.01019528042525053, 0.0051751341670751572, 0.017933554947376251, 0.0065707010217010975, 0.0089690703898668289, 0.0092454813420772552, 0.0050506321713328362, 0.024546941742300987, 0.0073298234492540359, 0.0080737732350826263, 0.014523724094033241, 0.0043777003884315491, 0.010696611367166042, 0.0064038941636681557, 0.023225864395499229, 0.0086165927350521088, 0.0082512432709336281, 0.0054983734153211117, 0.0086598200723528862, 0.011403357610106468, 0.0049397316761314869, 0.0084108905866742134, 0.006513549480587244, 0.01811915822327137, 0.012072505429387093, 0.0090743042528629303, 0.0058033401146531105, 0.013660074211657047, 0.0080316215753555298, 0.0090712066739797592, 0.0091727711260318756, 0.019616086035966873, 0.020826404914259911, 0.0086045674979686737, 0.015349475666880608, 0.011080396361649036, 0.0058345557190477848, 0.0076568350195884705, 0.0082650370895862579, 0.018766414374113083, 0.0048722098581492901, 0.0049956799484789371, 0.012646646238863468, 0.020115949213504791, 0.004849572665989399, 0.013826756738126278, 0.02876586839556694, 0.0070980885066092014, 0.0079246014356613159, 0.010189606808125973, 0.0027834710199385881, 0.0044259964488446712, 0.0051390691660344601, 0.0064565693028271198, 0.0042341700755059719, 0.01111688744276762, 0.0064843930304050446, 0.010957329533994198, 0.0033425476867705584, 0.019115867093205452, 0.0078934216871857643, 0.010020062327384949, 0.006178007461130619, 0.0089646307751536369, 0.0045098504051566124, 0.009830886498093605, 0.016134098172187805, 0.0073997406288981438, 0.0039845868013799191, 0.013551722280681133, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1378, 9605, 207, 885, 3786, 10517, 348, 2324, 9745, -1018, 13670, 3716, 2398, 479, 2626, 137, 3903, 5995, 265, 13248, 1130, 9272, -1389, 2007, -8036, 1379, 2531, 1159, 7097, 1894, 2754, 6065, 1470, 12082, 4380, 3209, 3497, 1989, 2748, 3459, 13716, 1531, 2413, 1588, 3094, 9382, 6684, 10768, 973, -1143, 2322, 2640, 2929, -3102, 8422, 106, 3765, 14635, 1032, 2194, 2518, 8884, 2969, -1133, 18063, 6751, 2440, 3016, 9097, 2726, 2748, 550, -4302, 3907, 2253, 4163, 561, 12424, 4337, 5720, 2940, 1795, 4070, 17654, -310, 14146, 6874, 2029, -1094, 3281, 2703, 9228, 4914, 2787, 4298, 9514, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00025377506972290576, 8.8882414274848998e-05, 0.00030237995088100433, 0.00029551860643550754, 0.00015963030455168337, 8.4626954048871994e-05, 0.00017607853806111962, 0.00018098510918207467, 9.2157039034646004e-05, 0.00019829678058158606, 5.9233068895991892e-05, 0.00011986189929302782, 0.00016357534332200885, 0.00044074445031583309, 0.00018819786782842129, 0.00015429782797582448, 0.00016935510211624205, 0.00012903346214443445, 0.00015366828301921487, 7.2387047111988068e-05, 0.00018982197798322886, 8.4391729615163058e-05, 0.0001854438305599615, 0.00013484673399943858, 8.5424406279344112e-05, 0.0001548429427202791, 0.00020781737111974508, 0.00028335224487818778, 0.00012522160250227898, 0.0001747020723996684, 0.00023679253354202956, 9.9145858257543296e-05, 0.00025954050943255424, 7.247750909300521e-05, 0.00013236560334917158, 0.00018321280367672443, 0.00014738300524186343, 0.00022841570898890495, 0.00015289925795514137, 0.00014699953317176551, 7.1696806116960943e-05, 0.00019619570230133832, 0.00016487453831359744, 0.00010204417776549235, 0.00011778737825807184, 8.4758255979977548e-05, 0.00011536759120645002, 6.8884801294188946e-05, 0.00027902156580239534, 0.00026608785265125334, 0.00017748185200616717, 0.00021904788445681334, 0.0001807273511076346, 0.00012279996008146554, 8.3231527241878211e-05, 0.00030353097827173769, 0.00011180840374436229, 6.4521031163167208e-05, 0.00012748203880619258, 0.00018808897584676743, 0.00015491506201215088, 9.2452079115901142e-05, 0.00020080004469491541, 0.00020789321570191532, 4.9173904699273407e-05, 0.0001088629724108614, 0.00020278267038520426, 0.00016652033082209527, 7.647268648725003e-05, 0.00014624328468926251, 0.00016785031766630709, 0.00019850140961352736, 0.00012660780339501798, 0.00015770376194268465, 0.00019521874492056668, 0.00016694898658897728, 0.00016917518223635852, 7.1434580604545772e-05, 0.00015500739391427487, 0.00014195000403560698, 0.00013991480227559805, 0.00014375857426784933, 0.00012126908404752612, 5.6426048104185611e-05, 0.00015061946760397404, 6.2445506046060473e-05, 0.00010296544496668503, 0.00021901323634665459, 0.00018576088768895715, 0.00019405219063628465, 0.00013338807912077755, 9.0621455456130207e-05, 0.00011864474799949676, 0.00016034775762818754, 0.00011461351823527366, 7.8916753409430385e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 37,-25,8,62,-127,-7,96,31,64,78,-3,44,15,19,21,57, 
  /* [1][0][][] */ -35,29,-84,6,127,99,3,-6,-33,16,-94,16,-60,90,-70,-50, 
  /* [2][0][][] */ -46,59,75,-23,48,91,25,36,20,-26,42,-9,67,-127,5,27, 
  /* [3][0][][] */ 127,-13,16,14,10,20,-4,34,50,21,-55,5,-30,67,-2,54, 
  /* [4][0][][] */ -83,-27,-9,24,-83,27,-88,-9,-23,34,4,-57,-33,36,-13,127, 
  /* [5][0][][] */ -71,-4,33,15,127,26,-20,4,-39,30,-2,23,-74,40,-39,-25, 
  /* [6][0][][] */ -127,20,-54,22,-26,-89,83,18,14,-48,-69,54,10,-10,-59,-10, 
  /* [7][0][][] */ 65,107,39,-43,40,21,127,-2,39,-26,8,54,96,-27,-51,-10, 
  /* [8][0][][] */ -71,-14,-42,63,-21,84,-53,-58,32,-33,77,85,127,73,-125,-6, 
  /* [9][0][][] */ -31,-127,-43,71,-33,-44,2,73,38,32,12,67,-62,39,-3,-18, 
  /* [10][0][][] */ -10,2,-111,0,-99,115,101,-76,14,-100,49,-8,51,127,-41,109, 
  /* [11][0][][] */ -43,-114,5,-13,26,127,39,1,-16,40,29,-63,-9,98,-123,112, 
  /* [12][0][][] */ -27,-73,-65,82,-87,-109,-2,59,34,71,-2,127,-23,-66,-31,-17, 
  /* [13][0][][] */ -70,-30,-45,5,-17,-1,27,33,-8,127,1,-26,36,24,13,-18, 
  /* [14][0][][] */ -91,-48,-34,-77,-36,18,-32,-89,127,-44,67,12,73,-7,-80,-102, 
  /* [15][0][][] */ 5,-127,93,-44,-42,-31,11,68,-4,-56,-91,-32,99,-40,-35,-35, 
  /* [16][0][][] */ 1,-32,37,-61,48,10,-26,-34,95,-121,64,-5,-37,-15,-81,-127, 
  /* [17][0][][] */ -25,7,-1,-41,25,-13,-53,6,53,-69,20,80,96,-102,-30,-127, 
  /* [18][0][][] */ 76,28,-25,-126,-5,-41,123,-38,16,50,-17,53,-40,66,11,-127, 
  /* [19][0][][] */ -51,-32,7,-100,-102,22,-47,3,32,-33,31,-127,-36,-35,-53,-14, 
  /* [20][0][][] */ 10,41,62,-127,72,15,-41,66,-118,-113,42,-59,-17,108,-32,2, 
  /* [21][0][][] */ 16,-77,-127,32,47,33,59,92,-45,-70,-7,-20,80,-57,-13,21, 
  /* [22][0][][] */ 50,-17,88,7,18,10,92,32,10,118,33,32,11,27,127,0, 
  /* [23][0][][] */ -127,-61,-5,33,85,48,5,37,-17,21,-17,-71,31,80,93,115, 
  /* [24][0][][] */ 5,-26,35,15,-6,-96,26,-47,23,94,-127,45,-11,-80,83,-95, 
  /* [25][0][][] */ 104,-69,127,118,28,-12,-5,28,-78,89,64,-50,-10,35,52,-31, 
  /* [26][0][][] */ -21,28,22,35,-51,104,-12,38,-56,-32,-87,41,9,21,41,-127, 
  /* [27][0][][] */ 45,3,5,-65,-43,-26,-98,14,-96,-9,-92,-35,-87,47,-14,127, 
  /* [28][0][][] */ -62,7,4,-21,27,-21,-127,1,11,-29,-18,-33,-1,-82,-49,-36, 
  /* [29][0][][] */ -35,-127,-6,119,-28,-13,123,8,73,65,-124,66,34,-24,-51,78, 
  /* [30][0][][] */ 40,-53,-42,25,-127,15,37,-22,14,29,5,-28,10,34,18,40, 
  /* [31][0][][] */ -127,-5,-2,113,-48,0,-50,9,-27,-71,-2,-58,-33,-62,-14,95, 
  /* [32][0][][] */ -119,-76,-87,-4,-81,-55,-11,-35,127,61,-56,-76,20,57,36,-21, 
  /* [33][0][][] */ -36,-1,-94,26,-92,-72,42,15,-123,35,-47,-33,-11,127,72,88, 
  /* [34][0][][] */ 24,39,-34,25,-20,-17,23,10,-8,-87,0,18,-22,6,37,127, 
  /* [35][0][][] */ 21,-33,-39,-15,-121,13,127,-22,38,64,14,3,47,116,19,79, 
  /* [36][0][][] */ -44,15,-57,57,127,0,40,54,-70,32,-83,-78,-19,8,25,56, 
  /* [37][0][][] */ -115,52,-5,-84,3,-84,-16,6,-14,-51,4,45,60,-68,22,-127, 
  /* [38][0][][] */ -12,44,51,-40,-78,-42,-127,-29,-50,-35,48,55,-82,-73,85,6, 
  /* [39][0][][] */ -12,-9,-3,31,13,78,86,-53,-28,39,-18,-40,9,86,23,127, 
  /* [40][0][][] */ 83,14,69,29,-29,-25,0,10,-76,60,-26,25,-15,-18,127,26, 
  /* [41][0][][] */ -22,-30,7,32,-97,108,-22,58,-51,32,-110,-8,18,31,22,-127, 
  /* [42][0][][] */ -9,-69,26,-26,127,25,68,19,-23,-97,-52,-12,-18,-19,-4,65, 
  /* [43][0][][] */ -58,-39,-48,-58,61,15,57,68,-127,-73,-109,-86,92,21,-28,113, 
  /* [44][0][][] */ -37,-70,-66,-98,25,107,41,-2,-34,-93,-46,44,-71,45,60,127, 
  /* [45][0][][] */ -18,-55,-110,24,-127,99,-76,-88,43,-25,90,-43,-30,-25,-33,51, 
  /* [46][0][][] */ 42,-13,-9,-5,20,-113,1,67,-3,-42,55,74,-62,-69,59,-127, 
  /* [47][0][][] */ -100,8,-69,42,-71,65,51,7,12,118,127,88,-111,19,14,121, 
  /* [48][0][][] */ 42,2,-68,-82,30,-64,22,45,44,-79,-7,22,-50,14,-36,-127, 
  /* [49][0][][] */ 58,44,16,55,-20,-37,24,44,-47,127,-30,20,-57,-18,72,77, 
  /* [50][0][][] */ 9,12,19,21,-127,-20,-19,-45,65,27,29,59,-33,-63,8,7, 
  /* [51][0][][] */ 29,-4,-9,-127,-23,76,14,-38,18,18,18,-37,51,24,-15,-10, 
  /* [52][0][][] */ 4,-39,-18,-70,81,-95,-2,-30,1,-27,127,-78,44,20,-19,110, 
  /* [53][0][][] */ -77,-43,38,-30,-53,-127,23,-105,-34,101,-92,107,-48,2,35,-84, 
  /* [54][0][][] */ 100,83,33,-15,-103,-43,-81,-127,2,20,43,67,-87,-45,44,-18, 
  /* [55][0][][] */ 9,-9,-40,76,-57,12,27,-28,6,127,36,48,13,-9,8,29, 
  /* [56][0][][] */ 15,-96,-87,69,-106,6,-2,43,117,29,127,60,-30,-1,50,70, 
  /* [57][0][][] */ 12,-23,36,-114,88,2,-45,40,-33,-2,41,127,42,-60,105,-8, 
  /* [58][0][][] */ 113,-40,-2,-87,14,43,10,93,71,106,-9,126,25,-24,127,-28, 
  /* [59][0][][] */ -43,19,-27,-66,-5,-20,-12,50,-22,12,-57,-60,-127,-73,55,11, 
  /* [60][0][][] */ 56,-29,-3,-37,11,12,13,-27,27,127,-2,66,-27,-68,14,-33, 
  /* [61][0][][] */ 65,65,28,-55,-95,-127,-29,-26,-71,-1,-21,45,-32,-45,88,89, 
  /* [62][0][][] */ -26,37,-50,43,-17,127,-33,9,-63,3,-30,26,-9,53,36,-53, 
  /* [63][0][][] */ 15,-18,-70,-127,-24,-35,80,-9,-9,-68,-20,31,-17,56,16,-44, 
  /* [64][0][][] */ -38,45,-24,22,20,-46,47,84,-127,-43,-41,-34,-29,91,60,97, 
  /* [65][0][][] */ -69,-33,-30,-5,68,20,-50,-71,-85,-60,-12,-8,-127,95,-28,44, 
  /* [66][0][][] */ -43,60,-3,31,-34,127,-29,15,-92,29,-32,67,-12,50,54,-77, 
  /* [67][0][][] */ 9,-42,-76,-13,46,-54,5,-82,6,39,22,127,-68,-11,-39,-72, 
  /* [68][0][][] */ -33,-103,-26,127,-35,4,18,115,18,54,121,40,-84,112,19,77, 
  /* [69][0][][] */ 40,47,36,-70,82,9,-10,111,54,64,47,99,127,-38,3,-92, 
  /* [70][0][][] */ 71,12,40,-60,105,13,-91,-56,-127,-123,-29,31,-3,51,-122,-11, 
  /* [71][0][][] */ -6,-62,22,-51,19,-20,35,26,-55,65,-127,-70,31,34,-1,26, 
  /* [72][0][][] */ 18,50,79,-3,-88,-24,-85,-94,-23,72,-45,37,15,79,-127,-20, 
  /* [73][0][][] */ 3,-46,-24,-28,45,-118,26,-45,84,95,108,-7,40,-19,-63,127, 
  /* [74][0][][] */ 9,24,-19,100,-78,-20,95,28,62,72,33,111,127,33,-73,14, 
  /* [75][0][][] */ -41,44,-41,29,-56,127,-15,27,-29,29,-19,48,-27,54,38,-51, 
  /* [76][0][][] */ -79,82,-71,57,-127,-3,-63,34,94,57,-20,-12,33,-57,-121,44, 
  /* [77][0][][] */ 92,113,-113,127,52,47,42,50,10,42,108,-24,50,43,104,23, 
  /* [78][0][][] */ 4,-41,-14,-54,62,-94,29,-29,26,33,127,-21,5,-5,-48,122, 
  /* [79][0][][] */ -52,62,19,39,11,-71,-64,-15,-127,5,22,5,90,56,-69,-47, 
  /* [80][0][][] */ -92,54,85,-31,75,78,47,-127,-71,36,-95,-38,17,-61,24,110, 
  /* [81][0][][] */ 107,80,-40,-10,25,-28,85,127,-111,117,-56,-34,-32,24,88,123, 
  /* [82][0][][] */ 65,127,-61,-116,-11,-44,99,-51,4,28,-61,79,55,-62,67,-48, 
  /* [83][0][][] */ 10,-27,6,12,9,-2,-45,-79,39,-19,74,13,23,-56,-44,-127, 
  /* [84][0][][] */ -127,-91,-36,-3,-22,89,88,-2,44,43,118,59,44,82,-59,25, 
  /* [85][0][][] */ 84,27,83,-73,104,-46,-34,109,-10,127,-53,38,-47,116,95,4, 
  /* [86][0][][] */ -103,68,-24,24,28,73,2,30,65,36,127,-11,-39,92,2,-1, 
  /* [87][0][][] */ 16,-52,29,-42,43,-127,26,-34,51,-5,64,-29,34,-48,-45,61, 
  /* [88][0][][] */ -92,83,57,1,127,-68,38,27,-102,-69,110,-96,93,120,91,-126, 
  /* [89][0][][] */ -26,35,-22,27,-35,127,-17,35,-52,4,-24,25,-14,51,30,-57, 
  /* [90][0][][] */ 39,-81,29,-5,127,16,37,16,-13,-67,-96,-21,-17,12,-75,25, 
  /* [91][0][][] */ -24,58,3,-54,-49,-121,-127,60,-80,40,-118,-104,-112,-37,43,-51, 
  /* [92][0][][] */ 77,58,43,15,-127,-105,7,11,-17,53,-29,-47,-23,-82,52,-17, 
  /* [93][0][][] */ 12,-127,-67,49,-11,-45,25,123,63,74,4,60,8,69,-8,-21, 
  /* [94][0][][] */ 99,7,127,4,43,-17,25,25,32,84,7,83,29,33,86,-6, 
  /* [95][0][][] */ -80,-31,-39,9,127,-4,43,56,-46,-34,-88,-67,38,61,-53,89, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0047399220056831837, 0.0016601146198809147, 0.0056477468460798264, 0.0055195926688611507, 0.0029815188609063625, 0.0015806325245648623, 0.0032887333072721958, 0.0033803763799369335, 0.0017212769016623497, 0.0037037178408354521, 0.0011063345009461045, 0.0022387385834008455, 0.0030552027747035027, 0.0082320701330900192, 0.0035150938201695681, 0.0028819206636399031, 0.0031631551682949066, 0.0024100418668240309, 0.0028701622504740953, 0.0013520198408514261, 0.0035454283934086561, 0.0015762391267344356, 0.0034636547788977623, 0.0025186201091855764, 0.0015955270500853658, 0.0028921021148562431, 0.0038815399166196585, 0.0052923536859452724, 0.002338845282793045, 0.0032630239147692919, 0.0044227279722690582, 0.0018518115393817425, 0.0048476066440343857, 0.0013537094928324223, 0.0024722781963646412, 0.0034219846129417419, 0.0027527681086212397, 0.0042662685737013817, 0.0028557986952364445, 0.0027456057723611593, 0.0013391277752816677, 0.003664474468678236, 0.0030794688500463963, 0.0019059453625231981, 0.0021999913733452559, 0.0015830849297344685, 0.0021547954529523849, 0.0012866061879321933, 0.0052114669233560562, 0.004969895351678133, 0.0033149437513202429, 0.0040912996046245098, 0.0033755621407181025, 0.0022936146706342697, 0.0015545692294836044, 0.0056692450307309628, 0.0020883181132376194, 0.001205101259984076, 0.0023810649290680885, 0.0035130600444972515, 0.0028934492729604244, 0.0017267875373363495, 0.0037504727952182293, 0.0038829564582556486, 0.00091845291899517179, 0.0020333044230937958, 0.0037875035777688026, 0.0031102083157747984, 0.0014283299678936601, 0.0027314808685332537, 0.0031350494828075171, 0.0037075397558510303, 0.002364736283197999, 0.0029455355834215879, 0.0036462272983044386, 0.003118214663118124, 0.0031597947236150503, 0.0013342300662770867, 0.0028951738495379686, 0.0026512923650443554, 0.00261327950283885, 0.0026850721333175898, 0.0022650214377790689, 0.0010539059294387698, 0.0028132174629718065, 0.0011663353070616722, 0.0019231524784117937, 0.0040906523354351521, 0.0034695765934884548, 0.0036244387738406658, 0.0024913756642490625, 0.0016925957752391696, 0.0022160049993544817, 0.0029949191957712173, 0.0021407110616564751, 0.0014739794423803687, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -8773, 10461, -18528, -282, 10718, -14556, -41991, -6652, -7396, 10408, -13174, -12855, 9243, -9685, -5460, -3528, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00013689427578356117, 0.00014371544239111245, 0.00010726360051194206, 0.00016368071374017745, 0.00010010045662056655, 0.00015224239905364811, 9.6026415121741593e-05, 0.00014035253843758255, 7.3820832767523825e-05, 7.0574118581134826e-05, 0.00016659546236041933, 0.00012889348727185279, 0.00011325130617478862, 9.4925155281089246e-05, 0.00013249693438410759, 0.00013998268696013838, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 27,29,31,-38,80,75,-39,63,-9,121,2,56,-21,41,-10,35,28,90,59,-68,-77,84,-10,44,48,50,37,66,-41,-47,-10,99,-29,22,-83,71,57,-127,-32,11,19,-22,68,-2,7,-54,-52,-7, 
  /* [1][0][][] */ -55,-2,-83,-43,2,92,-54,21,-26,-29,-39,28,61,-5,-32,-27,-33,-29,-8,21,-56,33,-97,-23,-44,-37,48,70,-18,-30,38,-44,-1,-49,-29,51,1,-49,127,-37,-31,32,-62,-18,25,47,41,11, 
  /* [2][0][][] */ 5,16,62,-23,-18,-79,20,19,94,80,-72,17,112,-48,127,97,-83,-20,-17,24,92,-81,-31,-91,18,-37,34,-65,34,45,-51,3,20,-16,53,54,-75,16,7,-32,30,21,54,-3,-1,-94,92,-72, 
  /* [3][0][][] */ 33,9,-22,-34,34,104,16,2,39,-53,27,-27,-36,8,13,49,-40,-70,42,-114,-4,-9,-23,-20,-39,76,127,70,-15,-38,36,26,61,-27,101,28,-50,-63,3,40,14,18,-10,3,9,29,0,-16, 
  /* [4][0][][] */ 93,-9,13,-32,93,75,63,5,48,-25,-96,46,39,-18,12,-3,-83,-109,-21,-110,-9,14,-42,-13,-82,127,-97,114,-63,-60,31,81,33,-48,15,-28,-16,17,-13,44,-55,-13,-10,38,-44,98,-40,-73, 
  /* [5][0][][] */ 2,-8,-52,7,-10,45,20,-28,69,48,41,84,59,-23,34,0,-37,127,-20,32,16,-4,-63,-13,38,-5,-74,-37,-16,36,23,-16,-42,-4,50,5,-33,4,-89,19,78,-26,26,51,-22,11,-37,30, 
  /* [6][0][][] */ 60,6,11,69,2,-24,100,-50,22,67,127,122,37,43,-61,49,37,-29,-51,86,53,-56,-34,55,-94,92,91,-11,111,48,-27,-3,91,-54,-106,4,96,31,3,6,6,64,61,-52,82,112,59,8, 
  /* [7][0][][] */ -105,-13,-26,30,-59,-50,22,32,64,105,-41,-69,-110,11,-22,-13,-65,100,-7,107,-42,21,24,37,-29,-87,-23,-74,41,34,5,4,-19,26,15,-28,-2,-60,127,9,2,30,22,-10,53,73,-24,-8, 
  /* [8][0][][] */ -11,-99,55,-66,69,-59,68,-32,-21,-118,19,12,-28,8,33,36,-12,7,-52,113,-1,56,-18,27,66,-2,-48,-29,-127,-42,-69,-105,15,-73,-4,115,-10,24,105,30,16,-12,90,103,-7,-76,-34,91, 
  /* [9][0][][] */ 21,-52,20,-70,27,89,-48,59,31,-62,-27,-32,5,-39,122,-14,11,-110,28,40,-87,42,79,-29,-24,-96,-24,76,59,65,-35,-38,-52,37,-1,127,-39,-53,-66,-24,-32,-6,37,118,54,97,-64,9, 
  /* [10][0][][] */ -9,22,-26,-12,20,25,-69,-41,59,35,67,-11,-35,-9,50,-56,-60,127,-19,47,-2,-11,23,22,-51,35,1,90,32,1,-31,-14,69,5,-6,19,-4,-53,-49,21,-82,-3,22,-21,12,48,29,29, 
  /* [11][0][][] */ -33,41,-11,35,31,48,2,-3,16,22,-127,-76,59,20,-15,-48,-2,24,-62,-52,-8,9,102,-4,41,15,-9,35,9,27,-8,67,30,-11,-56,7,39,83,95,6,37,-24,63,1,-52,-14,85,13, 
  /* [12][0][][] */ -53,-8,29,30,-56,-69,7,5,-24,-42,-127,0,68,-87,25,47,34,100,88,-125,-27,48,-42,-67,-7,-26,39,-46,13,11,-22,75,64,78,40,-35,-60,-38,20,-4,-43,7,50,-5,29,-15,-45,-39, 
  /* [13][0][][] */ -47,-121,-41,-116,10,19,67,21,-115,2,117,-69,62,37,127,9,120,19,-6,-102,76,-89,118,-8,-64,-5,-34,-3,-42,-91,-108,29,54,-28,-67,54,49,-59,76,-66,-16,56,66,51,65,-16,106,-46, 
  /* [14][0][][] */ 67,17,-54,-5,-58,21,-86,-32,-18,63,58,46,-8,-66,6,-55,73,-105,16,5,80,-52,38,-9,-1,127,-92,7,-31,-28,-91,-3,127,58,91,-20,-78,24,-21,40,-24,-39,118,-14,-46,-42,-54,52, 
  /* [15][0][][] */ -59,9,32,24,93,5,4,24,22,69,-9,45,48,-17,-38,-14,15,39,2,-36,28,-31,-45,-51,58,-58,-41,57,-29,10,20,-4,-51,9,127,-24,-77,8,60,-7,-42,-25,21,8,-29,-27,-10,6, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0058180065825581551, 0.0061079063452780247, 0.0045587029308080673, 0.0069564301520586014, 0.0042542694136500359, 0.0064703021198511124, 0.0040811225771903992, 0.0059649827890098095, 0.0031373854726552963, 0.0029994000215083361, 0.0070803072303533554, 0.0054779732599854469, 0.0048131803050637245, 0.0040343189612030983, 0.0056311194784939289, 0.0059492639265954494, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 15972, -1448, 21305, 212, 16389, -2496, 45430, 1103, 12690, 40806, 5780, 37577, -1775, 9121, 31840, 34321, -1523, 4315, 1271, 56434, -1018, 17703, 2193, 15077, 15639, 41438, 1414, -2496, -5433, 16659, 24641, -270, 1220, 1739, 928, 12928, 8346, 32478, 1777, 18386, 23494, -1730, 710, 13650, -1254, 1661, 37166, 26207, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.553911225637421e-05, 9.6578907687216997e-05, 5.769845301983878e-05, 0.00017699931049719453, 0.00013067481631878763, 7.7452263212762773e-05, 4.7777055442566052e-05, 0.00023224203323479742, 7.9686047683935612e-05, 5.2295254135970026e-05, 4.85926830151584e-05, 6.8804794864263386e-05, 7.2602146246936172e-05, 0.0001130459932028316, 5.4025276767788455e-05, 6.7414461227599531e-05, 9.0808316599577665e-05, 4.7656390961492434e-05, 0.00014160231512505561, 3.7010595406172797e-05, 9.4180388259701431e-05, 6.9653957325499505e-05, 8.4674647951032966e-05, 0.00010829602251760662, 7.027059473330155e-05, 5.6884138757595792e-05, 5.5193635489558801e-05, 4.7822282795095816e-05, 0.00022647764126304537, 8.1734491686802357e-05, 6.6208631324116141e-05, 0.00030425240402109921, 8.5637104348279536e-05, 0.00017033769108820707, 8.4723840700462461e-05, 8.7308435468003154e-05, 9.5439056167379022e-05, 5.1937659009126946e-05, 8.2280821516178548e-05, 0.00011143866140628234, 6.9138062826823443e-05, 0.00015580571198370308, 0.00031575048342347145, 6.7814922658726573e-05, 0.0001343773037660867, 4.9443893658462912e-05, 5.0400936743244529e-05, 6.3969127950258553e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -106,97,-106,88,-62,68,-54,120,-124,-88,93,-92,82,-90,-48,-74,82,87,94,-111,51,-78,86,-82,-88,-64,108,119,-77,-58,-127,65,99,-102,86,-127,-79,-124,99,-62,5,-49,91,-127,127,78,-96,-91, -117,127,-118,70,-53,105,-43,122,-127,-100,127,-83,73,-114,-72,-53,127,120,127,-124,127,-116,80,-93,-107,-82,77,120,33,-78,-97,96,106,-127,96,-127,-92,-127,95,-63,-92,122,127,-120,-21,127,-105,-77, -83,44,-4,0,7,58,-59,9,-59,-55,50,-51,70,-22,-30,-13,38,60,84,-33,66,-61,35,-22,-127,-25,33,32,100,-21,-58,33,70,-108,45,-14,-19,-35,50,-23,-127,-44,61,-54,-83,101,-5,-70, 
  /* [0][1][][] */ -83,84,-60,122,-91,114,-116,127,-127,-108,90,-127,80,-118,-82,-127,96,94,-42,-116,73,-97,97,-111,-81,-115,113,119,-127,-89,-100,56,127,16,115,-115,-108,-112,117,-127,-107,-87,48,-87,124,71,-94,-127, -127,110,-127,127,-127,127,-127,71,-121,-127,110,-118,127,-127,-127,-125,123,127,-52,-127,93,-127,127,-127,-102,-127,127,127,6,-117,-127,127,118,32,127,-94,-127,-97,127,-98,-95,127,74,-93,-42,111,-127,-101, -106,66,-119,46,-54,43,-74,16,-89,-57,57,-72,79,-10,-36,-51,60,70,-30,-30,48,-67,38,-34,-110,-47,60,34,114,-56,-64,63,59,10,64,-2,-18,23,53,-64,-52,-103,37,-49,-113,64,-22,-84, 
  /* [0][2][][] */ -49,92,25,23,-43,52,-99,41,-67,-75,34,-125,84,-38,-18,-98,65,51,-74,-43,41,-13,28,-56,0,-53,61,13,-61,-83,-34,33,51,68,73,-24,-38,-59,56,-61,-78,-26,47,-87,87,51,-35,-63, -82,120,-95,41,-64,37,-108,35,-65,-71,54,-105,72,-87,-44,-87,77,68,-103,-50,47,-24,33,-52,-38,-65,54,38,20,-127,-64,63,70,69,71,-37,-47,-25,48,-32,-24,101,33,-77,-15,68,-21,-63, -49,119,-94,-4,-55,6,-71,-39,-47,-38,29,-114,55,6,-27,-50,54,41,-67,-24,22,-6,20,-9,-32,-28,16,15,89,-51,-28,40,30,34,27,5,3,3,32,-20,-22,-44,14,23,-52,69,-4,-25, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0027854123618453741, 0.0041046035476028919, 0.0024521842133253813, 0.0075224707834422588, 0.0055536795407533646, 0.0032917209900915623, 0.0020305248908698559, 0.0098702860996127129, 0.0033866569865494967, 0.0022225482389330864, 0.0020651889499276876, 0.0029242038726806641, 0.0030855911318212748, 0.0048044547438621521, 0.0022960742935538292, 0.0028651144821196795, 0.0038593532517552376, 0.0020253965631127357, 0.0060180979780852795, 0.0015729502774775028, 0.0040026665665209293, 0.0029602930881083012, 0.0035986723378300667, 0.0046025807969272137, 0.0029865002725273371, 0.0024175758007913828, 0.002345729386433959, 0.0020324469078332186, 0.009625299833714962, 0.0034737158566713333, 0.0028138668276369572, 0.012930726632475853, 0.0036395767237991095, 0.0072393515147268772, 0.0036007631570100784, 0.0037106084637343884, 0.0040561598725616932, 0.0022073504514992237, 0.0034969348926097155, 0.0047361431643366814, 0.0029383676592260599, 0.0066217426210641861, 0.013419395312666893, 0.0028821341693401337, 0.0057110353372991085, 0.0021013654768466949, 0.0021420398261398077, 0.0027186877559870481, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2206, -1343, 696, -2618, 4161, -547, 5460, -5585, 725, 375, 2402, 4579, 187, -1134, 745, 6166, -1254, 3721, 4915, 910, -1306, 1862, -752, 4200, 2490, 2467, 462, -494, 10705, -345, 3922, -1704, -886, 3787, -1115, 2121, 1648, 555, 448, 5558, 1815, 9997, -4251, 1329, 7830, 143, 2074, 2377, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00020032748579978943, 0.00025270006153732538, 0.0003330480249132961, 0.0001963896065717563, 0.00020854576723650098, 0.00025477641611360013, 0.00015011391951702535, 0.00011180005094502121, 0.00030444911681115627, 0.00036029770853929222, 0.00018682076188270003, 0.00018203402578365058, 0.00035870145075023174, 0.00019739790877792984, 0.00029528545564971864, 0.000147200160427019, 0.00031323620351031423, 0.00021310776355676353, 0.00017745885998010635, 0.00029127395828254521, 0.00024498629500158131, 0.00029155725496821105, 0.00022952929430175573, 0.00018675110186450183, 0.00019297923427075148, 0.00019139262440148741, 0.00031419188599102199, 0.00028701525297947228, 9.3250753707252443e-05, 0.00030880185659043491, 0.00016517957556061447, 0.00019693745707627386, 0.00018805134459398687, 0.00019882369088009, 0.00023849325953051448, 0.00024955914705060422, 0.00025988215929828584, 0.00027612797566689551, 0.00023576841340400279, 0.00015559117309749126, 0.00032525890856049955, 8.7408167019020766e-05, 0.00013880008191335946, 0.00031043347553350031, 0.00011053685011574998, 0.00020273025438655168, 0.00026714007253758609, 0.0002569818461779505, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 54,44,127,-37,66,113,-82,-53, 
  /* [1][0][][] */ 15,-90,-127,10,44,22,27,8, 
  /* [2][0][][] */ -127,-8,-52,-18,56,33,-72,-28, 
  /* [3][0][][] */ 40,72,127,-87,10,-111,-5,-14, 
  /* [4][0][][] */ -127,20,-41,-16,43,8,-51,-47, 
  /* [5][0][][] */ -100,25,-61,-13,9,45,-74,-127, 
  /* [6][0][][] */ -47,-127,-124,52,94,21,-2,34, 
  /* [7][0][][] */ -68,-127,-121,-87,-78,-81,3,101, 
  /* [8][0][][] */ 96,32,-4,-1,102,-99,-127,-1, 
  /* [9][0][][] */ -35,38,-47,90,-49,-39,127,-35, 
  /* [10][0][][] */ -33,127,42,84,126,-19,-7,59, 
  /* [11][0][][] */ -92,-28,-24,-10,-95,96,127,12, 
  /* [12][0][][] */ 70,26,-127,25,-15,-23,-62,-11, 
  /* [13][0][][] */ 81,-57,-105,-10,14,-127,-40,-21, 
  /* [14][0][][] */ 1,-66,68,10,127,-88,-55,18, 
  /* [15][0][][] */ -45,-41,9,127,65,68,-55,26, 
  /* [16][0][][] */ 98,42,-20,15,58,-95,-127,-12, 
  /* [17][0][][] */ 54,127,50,70,39,59,27,-75, 
  /* [18][0][][] */ 40,-23,6,-22,127,-10,34,-17, 
  /* [19][0][][] */ 2,127,24,20,-118,10,17,-17, 
  /* [20][0][][] */ -56,29,86,-127,20,50,-13,121, 
  /* [21][0][][] */ -34,57,18,-127,33,42,-7,105, 
  /* [22][0][][] */ -76,-72,-73,18,-125,127,102,-25, 
  /* [23][0][][] */ 102,45,-127,27,17,-61,-77,-17, 
  /* [24][0][][] */ -61,62,18,-11,-3,64,-127,124, 
  /* [25][0][][] */ -114,-58,-127,9,-58,-67,76,103, 
  /* [26][0][][] */ 36,-18,-20,-35,105,-5,127,-35, 
  /* [27][0][][] */ 127,-65,21,113,-3,45,-31,101, 
  /* [28][0][][] */ 28,69,58,1,127,-43,53,-31, 
  /* [29][0][][] */ -10,-21,-27,-38,-74,26,127,-39, 
  /* [30][0][][] */ 33,-127,-39,-36,-75,18,38,-48, 
  /* [31][0][][] */ 9,32,-8,-13,-127,8,-32,-6, 
  /* [32][0][][] */ 44,-64,-71,76,4,-98,124,-127, 
  /* [33][0][][] */ 46,127,57,50,53,-2,-11,-30, 
  /* [34][0][][] */ -117,-26,127,3,-37,85,97,8, 
  /* [35][0][][] */ -23,69,127,-21,-62,-65,-33,19, 
  /* [36][0][][] */ -95,2,88,-47,-31,127,85,34, 
  /* [37][0][][] */ -14,-76,-5,-127,-41,-71,72,46, 
  /* [38][0][][] */ 54,-21,78,-68,67,64,-127,20, 
  /* [39][0][][] */ -40,124,-127,-50,10,-6,17,97, 
  /* [40][0][][] */ 58,-54,11,32,13,-4,10,127, 
  /* [41][0][][] */ -43,101,127,25,-26,115,-71,47, 
  /* [42][0][][] */ 70,-127,-106,-18,-96,29,12,-107, 
  /* [43][0][][] */ -27,-56,47,-57,127,-42,-16,22, 
  /* [44][0][][] */ -5,127,102,11,6,51,-77,29, 
  /* [45][0][][] */ -47,55,21,98,-126,82,-127,34, 
  /* [46][0][][] */ -41,-40,64,47,-127,-112,-28,-8, 
  /* [47][0][][] */ -24,50,40,-90,-127,24,-11,45, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0022470299154520035, 0.0028344818856567144, 0.0037357276305556297, 0.0022028596140444279, 0.0023392126895487309, 0.0028577717021107674, 0.0016837952425703406, 0.0012540369061753154, 0.0034149396233260632, 0.0040413811802864075, 0.0020955279469490051, 0.0020418362691998482, 0.0040234765037894249, 0.0022141695953905582, 0.0033121528103947639, 0.0016511122230440378, 0.0035135024227201939, 0.0023903835099190474, 0.0019905176013708115, 0.0032671568915247917, 0.002747958293184638, 0.0032703345641493797, 0.002574580255895853, 0.0020947465673089027, 0.0021646062377840281, 0.0021468095947057009, 0.0035242221783846617, 0.0032193877268582582, 0.0010459735058248043, 0.0034637635108083487, 0.0018527834909036756, 0.0022090047132223845, 0.0021093310788273811, 0.0022301622666418552, 0.002675127238035202, 0.0027992508839815855, 0.0029150419868528843, 0.0030972675886005163, 0.0026445630937814713, 0.001745232380926609, 0.0036483586300164461, 0.00098043843172490597, 0.0015568904345855117, 0.0034820649307221174, 0.0012398678809404373, 0.0022739812266081572, 0.0029964521527290344, 0.0028825094923377037, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 41, 547, 27741, -4134, 5662, -12677, -618, -13499, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.3665701569989324e-05, 0.00010396676225354895, 0.00012795148359145969, 0.00012085737398592755, 0.00015407783212140203, 0.00012197557225590572, 9.2308619059622288e-05, 9.2254886112641543e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -45,-52,-6,-90,-3,-9,98,93,-106,-87,-20,10,-46,-16,-58,33,-81,10,19,127,74,1,35,106,95,82,43,4,-76,-79,-77,-36,-71,110,33,-47,28,-31,101,4,27,-4,19,-90,38,-54,-39,-77, 
  /* [1][0][][] */ -8,68,-12,-44,-66,69,-32,-49,-41,62,6,10,53,34,-47,18,-25,-104,88,-54,127,6,-67,26,66,-15,-83,53,29,-14,76,1,-48,-7,18,-5,-8,99,-25,-16,64,26,-8,4,89,10,-27,60, 
  /* [2][0][][] */ -34,-25,124,8,95,-44,-28,19,-37,6,-7,37,9,-39,-66,-127,-71,-104,-17,16,-124,10,-54,-45,-58,13,-4,-57,-50,5,-31,-31,-11,-3,39,-8,30,-30,-66,7,54,-35,30,-58,-51,-48,-76,-67, 
  /* [3][0][][] */ 45,23,71,0,10,-33,22,57,-54,-43,50,-36,-96,60,-8,56,64,46,-42,23,-111,-64,127,8,12,-29,-77,-32,-77,71,108,-66,20,-112,-8,46,-32,-79,-19,96,-63,-72,77,-4,-103,-72,66,-8, 
  /* [4][0][][] */ 23,-9,62,-43,6,-7,-4,-4,-53,-3,-15,3,38,-73,35,-83,30,41,-4,-36,10,23,12,10,9,4,50,-19,11,5,-127,-15,-25,-14,17,19,23,2,32,-2,-36,-28,-64,24,-26,-81,4,26, 
  /* [5][0][][] */ 15,-42,53,41,29,12,21,-6,-76,-10,-49,32,25,17,6,-40,79,79,-13,-20,82,-76,127,-92,-31,39,-3,54,9,32,-34,-57,-10,-51,-44,-1,57,32,64,-5,-93,38,26,19,60,-10,76,-15, 
  /* [6][0][][] */ -62,62,-127,97,59,8,30,31,-15,-16,51,-77,-91,-14,-27,40,-117,40,-15,88,14,38,-82,-93,-22,-28,25,82,-39,-23,-32,0,46,78,-47,-6,-4,-12,77,12,72,79,-115,-51,-38,123,-56,-56, 
  /* [7][0][][] */ 25,67,-89,27,1,60,107,90,40,82,-127,19,-23,11,-50,-63,14,31,95,98,82,-19,119,23,105,87,-58,93,-65,43,-1,-84,29,-82,-7,23,5,90,-53,91,-70,46,-44,-90,88,2,43,-45, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0039807921275496483, 0.0044185873121023178, 0.005437938030809164, 0.0051364381797611713, 0.0065483078360557556, 0.00518396170809865, 0.0039231162518262863, 0.0039208326488733292, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -72, 25808, -1525, -1181, 2794, -936, 2926, 1914, -4628, 48, -6861, 3, 133, -1123, -3061, 3211, 6161, 3990, 70, -5625, -10992, -2051, 18303, -5052, -770, 250, 8717, -6123, 3155, 293, -7229, 7656, 4991, 183, 4821, 807, 90, -1171, 8193, -1274, 6996, 222, 2926, 3571, -958, 14672, -1878, 1608, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00028271650080569088, 8.5707870312035084e-05, 0.00053489283891394734, 0.0002754230226855725, 0.00021262747759465128, 0.00026816962053999305, 0.00022042040654923767, 0.00032334731076844037, 8.5104569734539837e-05, 0.0002521105925552547, 0.00020906951976940036, 0.0012097865110263228, 0.00046392087824642658, 0.00047300398000515997, 0.00033689496922306716, 0.00070467195473611355, 0.00015595085278619081, 6.757601659046486e-05, 0.00022715159866493195, 0.00024160627799574286, 0.0002181865565944463, 0.00026380154304206371, 7.9248507972806692e-05, 0.00042364044929854572, 0.00019718194380402565, 0.00036639603786170483, 0.00046672939788550138, 0.00020438244973774999, 0.00021226733224466443, 0.00055833644000813365, 0.00015626345702912658, 0.00016080166096799076, 0.00015998516755644232, 0.00026037095813080668, 0.00013709133781958371, 0.00030193448765203357, 0.0018330104649066925, 0.00028831965755671263, 0.00017402306548319757, 0.00022032530978322029, 0.00020188115013297647, 0.00013497041072696447, 0.00030105505720712245, 0.00021323002874851227, 0.000348194211255759, 5.9970621805405244e-05, 6.2354549299925566e-05, 0.00019667261221911758, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 15,-108,12,24,-28,-102,-54,46,-32,-7,8,8,43,16,-4,9,87,-12,19,-5,12,3,-62,25,-18,-21,-32,-36,-82,70,-17,-104,58,-9,-68,-41,-19,-35,-2,-14,-14,71,15,1,3,55,127,-21, -127,-89,-15,127,-96,80,-110,127,21,21,15,-2,47,55,1,-30,-15,31,23,17,0,127,10,127,109,-43,-106,23,60,-127,-1,-84,75,-13,-29,-127,22,21,-50,-52,-127,-6,-98,-127,47,69,50,115, -8,-22,15,20,-44,65,46,27,16,-38,18,3,-22,9,2,9,-50,25,-72,-3,26,-16,127,33,-29,2,-21,20,18,40,7,6,-8,-10,-44,94,6,12,9,100,15,-47,30,-32,1,79,-8,-25, 
  /* [0][1][][] */ -15,-101,-24,4,41,-125,127,-92,0,2,34,28,127,10,7,-33,-8,-39,28,22,92,-50,46,13,-60,127,-68,-18,127,-93,38,-127,-44,6,-79,2,4,-56,-41,3,122,127,13,-96,-71,-60,-14,84, 84,-127,127,-5,127,38,-76,-72,53,127,127,-127,-93,127,127,127,127,127,120,127,127,103,-1,7,118,-112,-127,98,19,123,127,20,-127,127,127,100,-127,127,-127,-115,35,42,-127,-24,127,-121,-13,78, 18,29,-35,-2,-65,127,-112,76,127,-73,23,58,-37,-8,12,-62,12,12,-127,35,51,-89,-31,-3,71,-15,-3,127,-106,-41,24,0,-48,18,88,-23,37,-7,-5,-62,103,-11,26,51,-62,127,120,-89, 
  /* [0][2][][] */ 6,-57,9,-28,6,-106,-14,-15,-7,-12,-8,0,-9,-27,6,-7,-40,19,33,-39,11,-15,98,-14,-127,-3,58,-36,10,4,0,13,-1,-9,-78,14,1,0,30,39,-34,-8,15,10,-29,2,-35,8, 51,-78,-28,-37,24,16,116,-111,111,-29,-19,5,-75,-39,-27,-68,-6,115,-2,31,11,27,-22,-35,-72,54,88,4,-121,9,-20,9,-15,-18,-27,-21,55,-21,6,127,-127,-13,-6,58,30,61,16,-127, -10,-15,7,-13,-29,-15,-12,-31,-31,-18,-27,5,15,-34,-8,11,40,44,-38,8,11,-22,-51,-18,19,-18,32,-3,-31,4,-5,37,21,-27,-12,-44,-4,8,40,35,-15,-62,6,25,-26,31,96,-66, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012015450745820999, 0.0036425844300538301, 0.022732945159077644, 0.011705477721989155, 0.0090366676449775696, 0.011397209018468857, 0.0093678673729300499, 0.013742260634899139, 0.0036169441882520914, 0.010714699514210224, 0.008885454386472702, 0.051415927708148956, 0.019716637209057808, 0.020102668553590775, 0.014318035915493965, 0.029948558658361435, 0.0066279112361371517, 0.0028719806578010321, 0.009653942659497261, 0.010268266312777996, 0.009272928349673748, 0.011211564764380455, 0.003368061501532793, 0.018004719167947769, 0.0083802323788404465, 0.015571831725537777, 0.019835999235510826, 0.0086862538009881973, 0.0090213613584637642, 0.023729298263788223, 0.0066411970183253288, 0.0068340706638991833, 0.0067993695847690105, 0.011065765284001827, 0.0058263815008103848, 0.012832215055823326, 0.077902942895889282, 0.012253585271537304, 0.0073959799483418465, 0.0093638254329562187, 0.0085799489170312881, 0.005736242514103651, 0.012794839218258858, 0.0090622762218117714, 0.014798253774642944, 0.0025487514212727547, 0.0026500681415200233, 0.0083585856482386589, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 1936, 4596, 9947, 1157, 3126, -2111, 5500, 10307, 2380, -412, 2987, -2331, 21035, -1220, 2088, 22089, 132, 2416, 200, 2860, 4078, 3817, 725, 20484, 4500, 4121, 39146, 2412, 5690, 3958, 574, 1210, 766, 1766, 101, 237, -2776, -286, 2664, 2767, 4814, 2677, 3797, 4664, 5001, 2517, 2246, 5901, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00026810064446181059, 0.00018926685152109712, 9.0663386799860746e-05, 0.0002517550892662257, 0.0002024276036536321, 0.00023062348191160709, 0.0001406886731274426, 9.1362555394880474e-05, 0.00020594582019839436, 0.00024196358572226018, 0.00026779653853736818, 0.00020131902419961989, 4.7389519750140607e-05, 0.00028946020756848156, 0.00024189070973079652, 5.0165144784841686e-05, 0.00031283951830118895, 0.00018805208674166352, 0.00028516963357105851, 0.00021613210265059024, 0.00018473029194865376, 0.00019888879614882171, 0.0003779925755225122, 5.2969389798818156e-05, 0.00017409524298273027, 0.00015334876661654562, 2.9492844987544231e-05, 0.00021809668396599591, 0.00014467352593783289, 0.00017741654301062226, 0.00039013740024529397, 0.00042530344217084348, 0.00029059604275971651, 0.00024218425096478313, 0.0003003093006554991, 0.00026558680110611022, 0.00019878920284099877, 0.00029272705432958901, 0.00023041594249662012, 0.00017792664584703743, 0.00016899322508834302, 0.00024045066675171256, 0.00021003815345466137, 0.00017205582116730511, 0.00016021089686546475, 0.00027117482386529446, 0.00035456786281429231, 0.00013495220628101379, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 58,127,-61,-46,6,81,2,74, 
  /* [1][0][][] */ 68,-69,49,-127,-74,94,-106,-51, 
  /* [2][0][][] */ -39,127,105,39,83,1,42,17, 
  /* [3][0][][] */ 74,53,-74,79,-12,-73,-127,-19, 
  /* [4][0][][] */ -42,32,30,-67,-30,127,110,48, 
  /* [5][0][][] */ 20,75,-127,-68,34,70,13,6, 
  /* [6][0][][] */ -22,127,80,76,47,9,4,-83, 
  /* [7][0][][] */ 127,1,-36,15,19,31,89,41, 
  /* [8][0][][] */ 77,122,28,64,127,52,89,-73, 
  /* [9][0][][] */ 55,118,-127,-91,-1,108,13,71, 
  /* [10][0][][] */ -54,-34,21,-56,-4,-23,-61,127, 
  /* [11][0][][] */ 12,-115,-127,-26,20,-14,38,-8, 
  /* [12][0][][] */ -8,-127,-125,-49,-126,18,-51,46, 
  /* [13][0][][] */ -18,4,-101,99,-127,-28,-3,-12, 
  /* [14][0][][] */ -78,-55,-127,5,49,-5,-24,-69, 
  /* [15][0][][] */ 27,-113,-127,35,-75,-33,-29,-6, 
  /* [16][0][][] */ 127,-80,-21,76,-92,28,29,103, 
  /* [17][0][][] */ -22,107,127,-14,-46,-19,-32,-28, 
  /* [18][0][][] */ -12,-127,37,58,-16,-71,50,-72, 
  /* [19][0][][] */ 127,-47,-57,35,-103,5,47,90, 
  /* [20][0][][] */ -36,-127,81,72,-14,-95,-1,-71, 
  /* [21][0][][] */ -1,-62,-2,-29,127,-4,37,33, 
  /* [22][0][][] */ -127,44,-77,43,47,58,-80,-115, 
  /* [23][0][][] */ -87,-32,74,9,-99,127,108,-24, 
  /* [24][0][][] */ -1,30,-5,-44,-42,127,114,-22, 
  /* [25][0][][] */ -49,-107,-127,-63,-55,-9,-14,-27, 
  /* [26][0][][] */ -21,94,-16,127,-111,26,-46,-18, 
  /* [27][0][][] */ 5,-120,44,78,26,-57,13,-127, 
  /* [28][0][][] */ 30,113,48,35,127,-44,6,-68, 
  /* [29][0][][] */ 95,27,-62,-21,93,-127,-82,-29, 
  /* [30][0][][] */ 12,-41,27,-127,32,-25,40,-25, 
  /* [31][0][][] */ 34,-32,-6,60,-13,46,25,127, 
  /* [32][0][][] */ -94,-50,32,-38,-50,127,61,74, 
  /* [33][0][][] */ -30,34,43,-47,52,127,-88,72, 
  /* [34][0][][] */ 50,127,-86,-57,6,42,-45,66, 
  /* [35][0][][] */ 19,-127,62,84,-21,-83,20,-82, 
  /* [36][0][][] */ -11,-37,-99,-19,-127,-53,-27,9, 
  /* [37][0][][] */ -63,-127,74,91,-43,-88,-20,-36, 
  /* [38][0][][] */ -66,25,60,-53,-127,-88,-73,76, 
  /* [39][0][][] */ 90,-100,116,104,-11,-127,-27,-87, 
  /* [40][0][][] */ -17,44,5,41,-127,-18,-61,39, 
  /* [41][0][][] */ 91,127,-53,-76,39,17,-11,17, 
  /* [42][0][][] */ -3,-35,-15,5,127,15,45,18, 
  /* [43][0][][] */ 127,39,98,50,-78,-11,54,113, 
  /* [44][0][][] */ 87,33,-31,10,73,-107,-127,5, 
  /* [45][0][][] */ 41,19,25,24,57,-127,-10,-42, 
  /* [46][0][][] */ 57,-41,-13,127,37,57,29,64, 
  /* [47][0][][] */ -84,-98,33,71,-71,25,127,-111, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0036887235473841429, 0.0026040708180516958, 0.001247412757948041, 0.0034638294018805027, 0.0027851460035890341, 0.0031730853952467442, 0.0019356969278305769, 0.0012570323888212442, 0.0028335521928966045, 0.0033291107974946499, 0.0036845393478870392, 0.0027698935009539127, 0.00065201945835724473, 0.0039826040156185627, 0.0033281082287430763, 0.00069020851515233517, 0.0043042735196650028, 0.0025873573031276464, 0.003923571202903986, 0.0029737025033682585, 0.0025416535791009665, 0.0027364566922187805, 0.0052006966434419155, 0.00072879134677350521, 0.0023953288327902555, 0.0021098838187754154, 0.00040578399784862995, 0.0030007327441126108, 0.0019905234221369028, 0.0024410258047282696, 0.0053677940741181374, 0.0058516338467597961, 0.0039982316084206104, 0.0033321469090878963, 0.0041318736039102077, 0.0036541363224387169, 0.0027350862510502338, 0.0040275515057146549, 0.0031702299602329731, 0.0024480440188199282, 0.0023251315578818321, 0.003308295039460063, 0.0028898576274514198, 0.0023672690149396658, 0.0022042980417609215, 0.0037310202606022358, 0.0048784022219479084, 0.0018567705992609262, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7406, 12194, -3138, 6149, -1638, 5031, -11397, -16916, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00024301526718772948, 0.00011838824866572395, 0.00014309844118542969, 0.00013752558152191341, 0.00016859470633789897, 0.00013623297854792327, 0.00021681323414668441, 0.00014870204904582351, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -41,-3,32,7,-29,-14,6,6,-35,-1,-65,-50,-26,-62,-9,-30,47,-36,29,44,-18,34,-38,14,8,-31,54,-9,-4,-15,17,12,78,36,42,-127,14,-6,-25,-36,12,-16,42,45,35,3,27,1, 
  /* [1][0][][] */ 2,35,59,-22,-20,47,-44,-18,3,31,-4,-82,11,98,-15,62,-17,25,-21,-59,18,-70,-26,25,-65,-6,-11,-115,-19,-26,29,-68,56,81,-35,5,120,-39,-4,54,-32,34,-80,-26,127,-4,-34,-25, 
  /* [2][0][][] */ -1,-25,-56,11,-4,53,33,7,-9,43,2,29,67,-92,10,-56,32,-97,28,29,-28,52,-2,29,-28,56,-22,-78,22,-5,14,-87,-45,-87,21,-30,103,21,-16,-50,-5,28,87,23,127,7,17,21, 
  /* [3][0][][] */ -13,22,-75,38,24,-33,-61,-107,22,-11,-36,3,7,26,30,83,-11,19,-37,24,22,-107,34,-60,-85,-2,127,-14,-50,0,-71,7,-1,-82,-1,-7,-22,-43,-17,109,-51,-45,-2,26,44,5,-41,40, 
  /* [4][0][][] */ -24,-49,-9,6,37,-25,-16,-9,28,-26,56,-79,3,33,10,16,-15,-27,17,-10,-10,-47,-11,-18,18,-12,37,44,34,19,-17,25,-16,8,3,4,-67,90,39,-34,31,-20,-21,-20,-74,14,127,15, 
  /* [5][0][][] */ 41,-21,5,15,23,-42,35,-127,16,-35,-8,117,-80,67,27,-65,1,-89,4,3,-28,53,-35,-47,-50,78,-26,-8,-20,40,-40,-36,27,44,30,-16,-33,2,-43,-38,15,-35,-47,-11,-32,52,82,14, 
  /* [6][0][][] */ 50,-20,17,-13,-35,-15,-30,19,-42,7,-42,127,-41,-39,-7,59,9,40,21,36,31,-76,-32,18,21,38,-67,9,9,-42,12,39,-10,14,-21,-4,21,9,0,-4,-10,-17,39,54,-3,-33,69,-20, 
  /* [7][0][][] */ -24,3,-8,64,30,25,3,28,20,-3,65,-5,109,102,57,39,42,54,-12,3,23,-22,-77,-26,7,-5,-30,60,36,-29,-33,-10,35,-1,47,-93,-71,30,37,55,-34,38,76,127,-64,-26,-104,57, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.010328148491680622, 0.0050315004773437977, 0.006081683561205864, 0.0058448370546102524, 0.0071652745828032494, 0.0057899015955626965, 0.009214562363922596, 0.0063198371790349483, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 10736, 5482, 4489, 897, 1701, 250, 1341, 36670, 305, 3898, 6752, 63165, 446, 5922, -100, 13871, -1964, 17104, 622, 7934, 11464, 6, 4126, -10000, 7749, 1805, 1507, 13490, -1196, -1019, -11648, 12986, 4797, 1199, -469, 4646, -8532, 8396, -3580, 21159, -872, -1175, 3098, 1370, 1909, 226, 1696, -2187, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.6324020230676979e-05, 8.7288099166471511e-05, 0.00017110105545725673, 0.00011349895794410259, 0.00093359930906444788, 0.0001435041194781661, 0.00013768146163783967, 0.00010032008867710829, 0.00012641791545320302, 7.6761178206652403e-05, 7.1426897193305194e-05, 4.8301299102604389e-05, 8.2970844232477248e-05, 5.6119730288628489e-05, 0.00025886046933010221, 0.00014801450015511364, 0.00011221791646676138, 0.0003549771208781749, 0.00014909799210727215, 0.00014844404358882457, 0.00010655937512638047, 0.00034377633710391819, 0.00010025891242548823, 0.00020624978060368448, 0.00016956885519903153, 6.4273517637047917e-05, 5.441757821245119e-05, 8.5377047071233392e-05, 0.00016464437067043036, 0.0008350469870492816, 0.00021299603395164013, 7.5664480391424149e-05, 8.4465216787066311e-05, 0.00014275519060902297, 0.00017976724484469742, 5.9118960052728653e-05, 7.8797937021590769e-05, 4.3145126255694777e-05, 9.6319417934864759e-05, 5.8698966313386336e-05, 0.00018092998652718961, 0.00013244242290966213, 7.8000208304729313e-05, 7.8200013376772404e-05, 7.1075759478844702e-05, 0.00029469304718077183, 6.7229724663775414e-05, 0.00015930669906083494, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -40,-86,-31,-48,127,-54,64,-72,-97,-82,-9,-88,113,47,63,-127,70,-23,2,-24,-38,49,-18,35,-19,77,70,-62,98,-67,21,-56,-127,-64,46,85,34,90,122,-105,-116,-36,43,61,54,-127,72,94, -70,-92,-86,43,-85,115,65,-84,-92,31,86,-127,127,93,108,-84,-92,-111,34,-61,-57,97,-111,115,-71,127,89,-124,109,-55,9,-127,-84,-88,73,127,127,115,127,-86,-127,-61,66,78,68,124,76,65, -4,-79,-51,98,-48,-33,36,-21,94,29,58,-96,25,65,-37,-29,-87,-20,23,-26,-29,-45,-80,-33,-69,52,25,-79,39,62,127,-71,-7,3,-19,66,76,82,43,-23,-18,110,54,20,38,24,5,-123, 
  /* [0][1][][] */ -127,-70,-49,-92,-92,-79,77,-127,-127,-127,102,-99,119,56,-127,-64,127,-127,-63,-48,-120,105,-60,30,-20,126,102,-57,-97,-80,13,-61,-103,-127,-127,79,44,92,40,-117,56,-24,97,108,92,111,127,-92, -88,-127,-127,-107,-40,127,127,-98,89,45,127,-118,97,127,90,-106,65,-87,-127,-127,-127,127,-127,127,-94,107,127,-127,-127,127,-3,-125,-110,-113,55,111,126,127,31,-127,93,-96,127,127,127,0,119,127, -30,-91,-108,127,67,-51,48,-32,69,14,18,-50,10,77,86,-57,-7,-4,-16,-67,-59,10,-70,-33,-127,55,34,-90,-49,35,127,-82,-59,19,67,60,85,80,15,-33,47,127,53,21,51,-65,28,32, 
  /* [0][2][][] */ -78,-41,1,1,-49,-48,11,-61,39,-41,6,-26,55,17,-42,-44,-81,-45,92,-24,-7,72,-48,4,-6,76,89,-1,26,62,17,4,4,-72,-41,35,22,38,-53,-46,19,5,78,43,45,52,29,-50, -94,-23,-33,-78,92,32,31,-67,87,27,-60,-52,-12,44,-119,-94,34,-15,42,-76,-63,59,-74,51,-57,64,66,-43,22,5,-36,-35,-69,-26,-68,56,29,45,-94,-69,33,-38,86,74,55,-120,26,3, -35,-35,-16,-18,-9,-17,2,-20,-78,6,0,-20,-9,27,40,-48,38,31,-3,-63,-14,2,-4,-37,-45,6,42,-31,9,-72,64,-35,-74,30,28,46,19,42,-62,-26,16,51,6,22,23,-23,19,56, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0036687706597149372, 0.0037097441963851452, 0.0072717946022748947, 0.0048237056471407413, 0.039677970111370087, 0.0060989251360297203, 0.0058514620177447796, 0.0042636035941541195, 0.005372761283069849, 0.0032623501028865576, 0.0030356431379914284, 0.0020528051536530256, 0.003526260843500495, 0.0023850884754210711, 0.011001569218933582, 0.0062906160019338131, 0.0047692614607512951, 0.015086526982486248, 0.0063366643153131008, 0.0063088717870414257, 0.004528773482888937, 0.014610493555665016, 0.0042610038071870804, 0.0087656155228614807, 0.0072066760621964931, 0.0027316242922097445, 0.0023127470631152391, 0.0036285244859755039, 0.0069973855279386044, 0.035489495843648911, 0.0090523315593600273, 0.0032157402019947767, 0.0035897716879844666, 0.0060670953243970871, 0.0076401075348258018, 0.0025125558022409678, 0.0033489121124148369, 0.0018336678622290492, 0.0040935752913355827, 0.0024947060737758875, 0.0076895239762961864, 0.0056288028135895729, 0.0033150087110698223, 0.0033235005103051662, 0.0030207198578864336, 0.012524454854428768, 0.0028572631999850273, 0.0067705344408750534, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1014, -259, -409, 1190, 18776, 2445, -565, 5586, 1849, 1348, 292, 2699, 1379, 467, -613, 613, 2082, 9788, 3047, -573, 1279, -906, -59, 2411, -419, -605, 1321, -45, 2956, 10146, 2083, -28, 366, -50, 1920, -118, 214, -96, 1016, 1202, 1720, 2075, 175, -248, 375, 1396, 1141, -38, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00047217778046615422, 0.00043698592344298959, 0.00032991939224302769, 0.00031688602757640183, 5.8290126617066562e-05, 0.00030120709561742842, 0.00056428107200190425, 0.0001777511351974681, 0.00030820979736745358, 0.00054051069309934974, 0.00034504479845054448, 0.00032964631100185215, 0.0002275284641655162, 0.00040847610216587782, 0.00041340378811582923, 0.00035417318576946855, 0.00032522642868570983, 0.00010022243077401072, 0.00027472252259030938, 0.00040686837746761739, 0.00039994256803765893, 0.00023648442584089935, 0.00055912917014211416, 0.00030776706989854574, 0.00042594128171913326, 0.00083264359273016453, 0.00038692436646670103, 0.00087632477516308427, 0.00027397641679272056, 9.485486225457862e-05, 0.00033007108140736818, 0.00075631082290783525, 0.00046468348591588438, 0.00038113075424917042, 0.00037325103767216206, 0.00036896433448418975, 0.00048165797488763928, 0.00077592261368408799, 0.00043636685586534441, 0.00050488219130784273, 0.00035191400093026459, 0.00032835191814228892, 0.00041279513970948756, 0.00052201602375134826, 0.00053912814473733306, 0.00031580001814290881, 0.00032756337895989418, 0.00039874386857263744, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -49,24,6,-28,-72,-24,-127,41, 
  /* [1][0][][] */ 92,-87,-58,-59,127,-91,102,14, 
  /* [2][0][][] */ -109,127,-35,-115,40,-10,-4,42, 
  /* [3][0][][] */ 91,-6,123,16,68,111,127,-21, 
  /* [4][0][][] */ -75,-127,60,-6,-69,-122,4,-30, 
  /* [5][0][][] */ 127,-20,73,78,-80,-13,-2,-16, 
  /* [6][0][][] */ 29,20,127,-31,41,-51,-52,35, 
  /* [7][0][][] */ 37,0,-127,-29,-51,100,86,-77, 
  /* [8][0][][] */ -7,127,-48,18,60,96,55,35, 
  /* [9][0][][] */ 18,109,-39,105,18,-126,30,127, 
  /* [10][0][][] */ 0,-117,3,-29,-75,-127,-49,-87, 
  /* [11][0][][] */ -127,-82,109,50,2,-63,103,66, 
  /* [12][0][][] */ -35,47,-127,71,44,-52,-64,94, 
  /* [13][0][][] */ 88,-127,94,92,8,35,43,-64, 
  /* [14][0][][] */ -14,65,-31,-127,-24,-82,-9,-58, 
  /* [15][0][][] */ 25,107,31,-27,31,-45,101,-127, 
  /* [16][0][][] */ -117,-127,-65,67,-48,14,-10,72, 
  /* [17][0][][] */ -28,-104,-127,75,-61,66,-45,65, 
  /* [18][0][][] */ -96,-106,-74,88,-3,26,-6,127, 
  /* [19][0][][] */ 56,-111,90,-127,6,-74,24,-41, 
  /* [20][0][][] */ 2,74,39,13,43,127,84,-17, 
  /* [21][0][][] */ 32,109,44,-27,40,-65,91,-127, 
  /* [22][0][][] */ 21,20,81,15,-8,127,28,-37, 
  /* [23][0][][] */ -104,-65,33,-82,93,93,-42,-127, 
  /* [24][0][][] */ -96,-86,36,-103,108,95,-70,-127, 
  /* [25][0][][] */ 127,10,-60,-12,18,30,-56,-16, 
  /* [26][0][][] */ -127,-28,-125,-19,-47,-29,3,9, 
  /* [27][0][][] */ 91,40,-15,-60,-127,-35,90,95, 
  /* [28][0][][] */ -124,-92,14,49,-62,-127,1,9, 
  /* [29][0][][] */ 97,97,22,-127,16,24,-47,-92, 
  /* [30][0][][] */ -78,-75,34,-63,67,94,-29,-127, 
  /* [31][0][][] */ 52,44,-17,127,3,-85,5,9, 
  /* [32][0][][] */ -27,127,-6,34,26,72,-12,42, 
  /* [33][0][][] */ -29,127,-101,24,33,-23,-27,-2, 
  /* [34][0][][] */ -127,-121,-28,85,-21,5,1,95, 
  /* [35][0][][] */ -54,127,-28,-4,72,112,48,81, 
  /* [36][0][][] */ 80,31,4,-46,-127,-48,90,111, 
  /* [37][0][][] */ -62,105,24,22,-127,95,-19,-110, 
  /* [38][0][][] */ 23,24,17,15,127,79,98,75, 
  /* [39][0][][] */ -19,-63,38,-12,20,70,-94,127, 
  /* [40][0][][] */ -63,-70,-68,127,-33,-17,3,65, 
  /* [41][0][][] */ 127,6,38,106,-63,-1,8,-10, 
  /* [42][0][][] */ -38,6,-54,-127,50,-87,13,67, 
  /* [43][0][][] */ 18,-6,80,-12,38,127,89,12, 
  /* [44][0][][] */ -23,-23,-72,127,43,-6,-48,-40, 
  /* [45][0][][] */ 71,127,100,-118,60,-32,31,-102, 
  /* [46][0][][] */ -30,-127,-40,29,1,38,-66,113, 
  /* [47][0][][] */ 34,44,113,5,95,127,94,0, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.004362479317933321, 0.0040373397059738636, 0.0030481454450637102, 0.002927729394286871, 0.00053854606812819839, 0.0027828707825392485, 0.0052134273573756218, 0.0016422535991296172, 0.0028475692961364985, 0.0049938112497329712, 0.0031878899317234755, 0.0030456224922090769, 0.0021021494176238775, 0.0037739358376711607, 0.0038194628432393074, 0.0032722277101129293, 0.003004786791279912, 0.00092596118338406086, 0.0025381783489137888, 0.0037590819410979748, 0.0036950937937945127, 0.0021848941687494516, 0.0051658288575708866, 0.0028434786945581436, 0.0039352974854409695, 0.0076928450725972652, 0.0035748179070651531, 0.0080964183434844017, 0.0025312849320471287, 0.00087636988610029221, 0.0030495468527078629, 0.0069876019842922688, 0.0042932392098009586, 0.0035212903749197721, 0.0034484891220927238, 0.0034088841639459133, 0.0044500674121081829, 0.0071687963791191578, 0.0040316199883818626, 0.0046646376140415668, 0.0032513549085706472, 0.0030336636118590832, 0.0038138395175337791, 0.0048229377716779709, 0.0049810381606221199, 0.0029176957905292511, 0.0030263781081885099, 0.0036840189713984728, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -8242, -5499, 14263, -10954, 24586, 6015, -9413, 12798, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00019515235908329487, 0.00022938313486520201, 0.00016596056229900569, 0.00025250148610211909, 0.00020232157839927822, 0.00015754153719171882, 0.00015393242938444018, 0.00028199408552609384, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -7,-8,-20,-49,-23,-26,24,-19,38,11,-35,-3,107,127,-20,-99, 
  /* [1][0][][] */ 127,-47,-43,19,-52,69,-68,-47,-38,76,-28,-47,-6,5,-58,-16, 
  /* [2][0][][] */ -41,-99,49,30,49,-63,-87,-22,29,-96,27,-127,45,-26,-70,25, 
  /* [3][0][][] */ 28,8,13,22,-9,75,-35,-13,127,54,8,19,3,-16,15,21, 
  /* [4][0][][] */ -87,-33,-35,-121,-22,30,47,-127,28,-34,-35,-38,-116,31,-29,-13, 
  /* [5][0][][] */ 95,50,64,-29,51,-42,-127,-125,-17,-77,81,56,-59,57,68,-40, 
  /* [6][0][][] */ 101,45,-126,-91,29,-77,-2,-88,-40,20,-127,98,95,-90,15,66, 
  /* [7][0][][] */ -127,-8,96,-32,-52,2,8,-57,-45,59,76,-30,56,-25,17,28, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0082939751446247101, 0.0097487829625606537, 0.0070533240213990211, 0.010731312446296215, 0.00859866663813591, 0.0066955150105059147, 0.0065421280451118946, 0.011984748765826225, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 25792, -887, -144, 3463, -548, 330, 11602, 1187, -207, 275, -2169, 3537, -1529, -823, -366, -1520, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00010319479770259932, 0.00018726791313383728, 0.00017765203665476292, 0.00015088642248883843, 0.0010495656169950962, 0.00082201784243807197, 0.00014776890748180449, 0.00092532823327928782, 0.00027709966525435448, 0.0011331901187077165, 0.00026731757679954171, 0.00017803136142902076, 0.00010800066957017407, 0.00029113391065038741, 0.00017167860642075539, 0.00043872473179362714, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -4,-6,11,3,-18,11,0,15,0,-11,4,-13,2,-4,-2,1, 4,-1,3,2,14,-2,0,-27,-5,9,0,107,-10,23,6,4, -2,3,-8,1,-3,-13,-6,10,-2,2,0,-19,3,-3,-3,2, 
  /* [0][1][][] */ 3,-22,-1,6,127,-24,-127,-20,127,127,-3,-16,114,-25,-2,-21, -127,127,127,3,-86,-90,-17,-100,16,-105,127,127,127,127,127,127, 14,-7,-5,0,-16,127,6,-9,-1,-13,-12,-13,8,-6,-16,-8, 
  /* [0][2][][] */ -1,-3,1,-18,-16,15,40,9,-10,-8,-4,-3,0,-1,-4,-13, 26,-15,-1,-127,8,-15,-13,127,-3,1,-3,-4,-13,-60,-10,-38, 4,3,1,-5,-4,-4,-1,-1,2,1,-4,-10,3,-8,0,-11, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0043857786804437637, 0.0079588862136006355, 0.0075502111576497555, 0.0064126728102564812, 0.044606536626815796, 0.034935757517814636, 0.0062801782041788101, 0.039326447993516922, 0.011776736006140709, 0.048160579055547714, 0.011360997334122658, 0.0075663328170776367, 0.0045900284312665462, 0.012373191304504871, 0.0072963405400514603, 0.018645800650119781, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 2630, -457, 8, -1061, 69204, 58227, 4267, 9959, 4484, 1135, 952, -167, 6035, -7433, -252, 38426, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00021495184046216309, 0.0010075457394123077, 0.00027976831188425422, 0.00018135811842512339, 2.1873076548217796e-05, 2.7552219762583263e-05, 0.00016668575699441135, 2.3692564354860224e-05, 0.00017434002074878663, 4.2113635572604835e-05, 0.00053043104708194733, 0.00095263007096946239, 0.00029537887894548476, 1.8184799046139233e-05, 0.00087291828822344542, 4.0465063648298383e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -88, -111, -32, 
  /* [0][1][][] */ 66, -38, 16, 
  /* [0][2][][] */ 31, 127, 19, 
  /* [1][0][][] */ 105, -94, -9, 
  /* [1][1][][] */ -127, 105, 25, 
  /* [1][2][][] */ 14, -1, -11, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -78, 
  /* [3][0][][] */ 121, 127, 60, 
  /* [3][1][][] */ 3, -20, -12, 
  /* [3][2][][] */ -100, -125, -42, 
  /* [4][0][][] */ 24, -72, -5, 
  /* [4][1][][] */ 25, -127, -2, 
  /* [4][2][][] */ 16, -86, -17, 
  /* [5][0][][] */ -80, 20, -5, 
  /* [5][1][][] */ -127, 33, -1, 
  /* [5][2][][] */ -81, 31, -10, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -52, 55, -18, 
  /* [6][2][][] */ -38, -54, -92, 
  /* [7][0][][] */ 38, 25, -10, 
  /* [7][1][][] */ 127, 63, -5, 
  /* [7][2][][] */ 47, 17, -5, 
  /* [8][0][][] */ -21, -30, 52, 
  /* [8][1][][] */ -54, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -20, 60, -14, 
  /* [9][1][][] */ -15, 127, -18, 
  /* [9][2][][] */ -1, 90, -11, 
  /* [10][0][][] */ 24, 87, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 64, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -79, 79, 5, 
  /* [13][0][][] */ 88, 31, -5, 
  /* [13][1][][] */ 127, 104, -12, 
  /* [13][2][][] */ 84, 97, 21, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 45, 99, -127, 
  /* [14][2][][] */ -15, -70, 81, 
  /* [15][0][][] */ -108, -34, 9, 
  /* [15][1][][] */ -127, -115, 13, 
  /* [15][2][][] */ -6, -61, -5, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.054812714457511902, 0.25692415237426758, 0.07134091854095459, 0.046246316283941269, 0.0055776340886950493, 0.0070258155465126038, 0.042504865676164627, 0.0060416036285459995, 0.044456701725721359, 0.010738976299762726, 0.13525991141796112, 0.2429206520318985, 0.075321607291698456, 0.0046371235512197018, 0.22259415686130524, 0.010318590328097343, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10823610424995422, } };
const TfArray<1, int> quant46_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.072681143879890442, } };
const TfArray<1, int> quant50_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.072909258306026459, } };
const TfArray<1, int> quant53_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.089152120053768158, } };
const TfArray<1, int> quant54_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.053539928048849106, } };
const TfArray<1, int> quant58_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.055229872465133667, } };
const TfArray<1, int> quant61_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.075357340276241302, } };
const TfArray<1, int> quant62_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.04651256650686264, } };
const TfArray<1, int> quant65_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.088641762733459473, } };
const TfArray<1, int> quant66_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.047210406512022018, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.20320835709571838, } };
const TfArray<1, int> quant69_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
