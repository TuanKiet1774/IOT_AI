#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// ----- C·∫•u h√¨nh WiFi -----
const char* WIFI_SSID = "Hi";
const char* WIFI_PASSWORD = "hehehehe";

// ----- C·∫•u h√¨nh MQTT ThingsBoard -----
const char* THINGSBOARD_SERVER = "thingsboard.cloud";
const char* ACCESS_TOKEN = "TPYOB7bRc8fys228pH9T";

WiFiClient espClient;
PubSubClient client(espClient);

// ----- C·∫•u h√¨nh c·∫£m bi·∫øn MQ-5 -----
#define MQ5_PIN 34  // Ch√¢n ADC c·ªßa ESP32
const int GAS_THRESHOLD = 1000; // Ng∆∞·ª°ng c·∫£nh b√°o kh√≠ gas

// ----- C·∫•u h√¨nh c·∫£m bi·∫øn ACS-712 -----
#define ACS712_PIN 35  // Ch√¢n ƒë·ªçc d√≤ng ƒëi·ªán c·ªßa ESP32

// ----- C·∫•u h√¨nh c·∫£m bi·∫øn DHT-22 -----
#define DHT_PIN 32   // Ch√¢n d·ªØ li·ªáu c·ªßa DHT-22
#define DHT_TYPE DHT22
DHT dht(DHT_PIN, DHT_TYPE);

void setup() {
    Serial.begin(115200);
    dht.begin();
    
    // K·∫øt n·ªëi WiFi
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    Serial.print("ƒêang k·∫øt n·ªëi WiFi");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\n‚úÖ ƒê√£ k·∫øt n·ªëi WiFi!");

    // K·∫øt n·ªëi MQTT ThingsBoard
    client.setServer(THINGSBOARD_SERVER, 1883);
}

void loop() {
    if (!client.connected()) {
        reconnect();
    }
    
    // ƒê·ªçc gi√° tr·ªã t·ª´ MQ-5
    int gasValue = analogRead(MQ5_PIN);
    
    float sum = 0;
    int numSamples = 1000;
    for (int i = 0; i < numSamples; i++) {
        sum += analogRead(ACS712_PIN);
        delay(1);
    }
    float avgVoltage = (sum / numSamples) * (3.3 / 4095.0); // Chuy·ªÉn ADC -> V
    float current = (avgVoltage - 2.5) / 0.185; // ƒê·ªïi V -> A v·ªõi ACS712-5A
    if (current < 0) current = -current; // ƒê·∫£m b·∫£o gi√° tr·ªã lu√¥n d∆∞∆°ng


    // ƒê·ªçc nhi·ªát ƒë·ªô & ƒë·ªô ·∫©m t·ª´ DHT-22
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    
    // Hi·ªÉn th·ªã d·ªØ li·ªáu tr√™n Serial Monitor
    Serial.printf("Gas: %d, Current: %.2fA, üå° Temperature: %.2f¬∞C, Humidity: %.2f%%\n", 
                  gasValue, current, temperature, humidity);

    // G·ª≠i d·ªØ li·ªáu l√™n ThingsBoard
    String payload = "{";
    payload += "\"gas\":" + String(gasValue) + ",";
    payload += "\"current\":" + String(current) + ",";
    payload += "\"temperature\":" + String(temperature) + ",";
    payload += "\"humidity\":" + String(humidity);
    payload += "}";

    Serial.print("üì§ G·ª≠i d·ªØ li·ªáu: ");
    Serial.println(payload);

    client.publish("v1/devices/me/telemetry", payload.c_str());

    delay(5000);
}

// H√†m k·∫øt n·ªëi l·∫°i MQTT n·∫øu b·ªã m·∫•t k·∫øt n·ªëi
void reconnect() {
    while (!client.connected()) {
        Serial.print("üîÑ ƒêang k·∫øt n·ªëi MQTT...");
        if (client.connect("ESP32_Client", ACCESS_TOKEN, "")) {
            Serial.println("‚úÖ K·∫øt n·ªëi MQTT th√†nh c√¥ng!");
        } else {
            Serial.print("‚ùå Th·∫•t b·∫°i, m√£ l·ªói: ");
            Serial.println(client.state());
            delay(2000);
        }
    }
}